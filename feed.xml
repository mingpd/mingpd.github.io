<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>밍피디의 개발노트</title>
    <link>https://mingpd.github.io/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>잔망스러운 개발노트</description>
    <pubDate>Thu, 20 Aug 2020 03:06:04 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Bear app으로 메모를 마이그래이션하는 개발자의 해결법 (PenCake to Bear)</title>
      <link>https://mingpd.github.io/2020/08/20/bear-migration/</link>
      <guid>https://mingpd.github.io/2020/08/20/bear-migration/</guid>
      <pubDate>Thu, 20 Aug 2020 04:43:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;제가 최종적으로 간택한 노트(메모)앱은 Bear 입니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><p>하루에 한 줄이라도 일기를 쓰는 습관을 들였습니다.<br>그렇게 2012년 evernote부터 시작하여, dayone, pencake 등의 앱을 거쳤습니다.<br>문제는 이 앱들이 뭔가 조금씩 제 성에 차지 않았다는 점 입니다.</p><p>그 중 제 마음을 최종적으로 사로잡은 녀석은 바로 <a href="https://bear.app/" rel="external nofollow noopener noreferrer" target="_blank">Bear</a> 입니다.<br><img src="/2020/08/20/bear-migration/bear.png"></p><h2 id="Bear-간택-이유"><a href="#Bear-간택-이유" class="headerlink" title="Bear 간택 이유"></a>Bear 간택 이유</h2><ol><li>애플 생태계 완벽 지원 (다만, 애플이 아니면 사용이 불가능)</li><li>군더더기 없는 UI</li><li>Evernote, DayOne 등에서 거의 완벽히 Import 가능 (이미지도 그대로)</li><li>폴더 구조를 태그로 제어 가능 </li><li>iCloud 동기화를 이용, 동기화 속도가 굉장히 빠름 (프로 구독시)</li><li>프로 구독료가 싸다. 현재 기준 월 1,500원</li><li>마크다운 문법 지원</li><li>여러 포멧으로 export 가능 (md, pdf, html, docx, jpg, rtf)</li></ol><p>첫번째 이유는 저에겐 최고의 장점입니다만, 윈도우나 안드로이드를 사용하시는 분들께는 최악의 단점이 될테니 혹시나 Bear 이용을 고려하시는 분들께는 반드시 참고하시길 바랍니다.<br>사실 가장 맘에 들었던 것은 3, 4번 항목입니다.</p><h2 id="Bear-단점"><a href="#Bear-단점" class="headerlink" title="Bear 단점"></a>Bear 단점</h2><ol><li>Create, Modified Timestamp 수정을 못함</li><li>애플 생태계 외에는 사용을 못함</li><li>테이블을 그릴 수 없음 (현재 지원되는 버전 개발 중 인듯 함)</li></ol><p>저는 앱등이여서 2번은 노상관이기때문에 재끼겠습니다.<br>전 1번이 가장 맘에 안드는 포인트였습니다.<br>다른노트에서 수동으로 한두건씩 마이그래이션 하는 경우 타임스탬프가 그 입력시점으로 찍혀서 정렬이 틀어지는 경우가 생기는 것이죠.<br>하지만 해결 방법은 있습니다.</p><h2 id="enex를-이용한-마이그래이션"><a href="#enex를-이용한-마이그래이션" class="headerlink" title="enex를 이용한 마이그래이션"></a>enex를 이용한 마이그래이션</h2><img src="/2020/08/20/bear-migration/bear1.png"><p>enex란, evernote 데이터의 포멧입니다. 위 이미지에서 보시다시피 Bear는 evernote 데이터를 import 할 수 있습니다.<br>enex 포맷에 대해 더 자세히 알아보시려면 여길 참고해주세요. <a href="https://evernote.com/blog/how-evernotes-xml-export-format-works/" rel="external nofollow noopener noreferrer" target="_blank">How Evernote’s XML Export Format Works</a></p><p>더 알아보기 귀찮으니 어떻게 생겼는지 직접 눈으로 봅시다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">en-export</span> <span class="attr">export-date</span>=<span class="string">"20200819T011503Z"</span> <span class="attr">application</span>=<span class="string">"Evernote"</span> <span class="attr">version</span>=<span class="string">"Evernote Mac 7.14 (458265)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>제목<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">content</span>&gt;</span>&lt;![CDATA[&lt;!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"&gt;&lt;en-note&gt;&lt;div&gt;내용&lt;/div&gt;&lt;div&gt;내용&lt;/div&gt;&lt;/en-note&gt;]]&gt;<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">created</span>&gt;</span>20190311T073918Z<span class="tag">&lt;/<span class="name">created</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">updated</span>&gt;</span>20190311T073932Z<span class="tag">&lt;/<span class="name">updated</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">note-attributes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">latitude</span>&gt;</span>위도<span class="tag">&lt;/<span class="name">latitude</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">longitude</span>&gt;</span>경도<span class="tag">&lt;/<span class="name">longitude</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">altitude</span>&gt;</span>고도<span class="tag">&lt;/<span class="name">altitude</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">author</span>&gt;</span>작성자에버노트계정이메일<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span>&gt;</span>desktop.mac<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">reminder-order</span>&gt;</span>0<span class="tag">&lt;/<span class="name">reminder-order</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tag</span>&gt;</span>태그<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">note-attributes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">en-export</span>&gt;</span></span><br></pre></td></tr></table></figure><p>대충 이렇게 생겼습니다. 생각보다 간단하죠?<br>굳이 각 항목에 대해 설명할 필요는 없어보일만큼 명확합니다.<br><code>위치정보들</code>, <code>author</code>, <code>source</code>, <code>reminder-order</code> 는 무시해도 될것 같은 느낌입니다.</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="js-script"><a href="#js-script" class="headerlink" title="js script"></a>js script</h2><p>뭐.. 파이썬이나 루비 같은거로 하셔도 되겠습니다만.. 저는 이런거 할때 js가 제일 편하더라고요<br>그래서 nodejs가 필요합니다. 설치는 각 os 플랫폼에 맞게 알아서 잘 준비해주시길 바라겠습니다.</p><p>저는 <a href="http://efn27.app.goo.gl/i" rel="external nofollow noopener noreferrer" target="_blank">PenCake</a> 글쓰기 앱에서 Bear로 migration 하려고 합니다.<br>이 글쓰기 앱은 애정을 가지고 썼었는데.. 뭔가 저의 니즈엔 살짝 부족한면이 있어서 부득이 Bear 이주를 선택했답니다.<br>PenCake에서 글들을 export 하면 아래와 같은 txt 파일이 출력됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">글의 제목이 텍스트 최 상단에 이렇게 들어가네요</span><br><span class="line"></span><br><span class="line">2019년 10월 2일 수 오후 8:03</span><br><span class="line"></span><br><span class="line">여기에 글의 내용이 plain text로 들어갑니다</span><br></pre></td></tr></table></figure><p>흠.. 뭔가 json 형식으로 되어있었다면 가공이 쉬웠을것 같은데요. 어쩔수없이 파싱을 해야합니다.<br>게다가 저 timestamp … 네.. 풀 수동으로 파싱해야합니다.<br>아무튼 위 파일을 enex로 바꿔봅시다.</p><figure class="highlight javascript"><figcaption><span>convertToEnex.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> directory = <span class="string">'./Story_001/Text'</span>  <span class="comment">// export 된 파일들이 있는 경로를 잘 지정해주세요</span></span><br><span class="line"><span class="keyword">const</span> filenames = fs.readdirSync(directory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래는 enex 파일 포멧의 헤더입니다. export-date는 별로 중요하지 않으니 그냥 두셔도 되고 건드리셔도 됩니다.</span></span><br><span class="line"><span class="keyword">const</span> xmlHeader = <span class="string">`&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export3.dtd"&gt;</span></span><br><span class="line"><span class="string">&lt;en-export export-date="20200819T011503Z" application="Evernote" version="Evernote Mac 7.14 (458265)"&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> noteBody = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> filename <span class="keyword">of</span> filenames) &#123;</span><br><span class="line"><span class="keyword">const</span> text = fs.readFileSync(<span class="string">`<span class="subst">$&#123;directory&#125;</span>/<span class="subst">$&#123;filename&#125;</span>`</span>, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">const</span> timestamp = text.split(<span class="string">"\n"</span>)[<span class="number">2</span>].split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">const</span> title = text.split(<span class="string">"\n"</span>)[<span class="number">0</span>].replace(<span class="string">"\r"</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2020년 8월 5일 수 오후 10:52</span></span><br><span class="line"><span class="comment">// 위와 같은 포맷일때 날짜를 파싱하자</span></span><br><span class="line"><span class="keyword">const</span> year = <span class="built_in">parseInt</span>(timestamp[<span class="number">0</span>].substring(<span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line"><span class="keyword">const</span> month = <span class="built_in">parseInt</span>(timestamp[<span class="number">1</span>].substring(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> paddedMonth = month &lt; <span class="number">10</span> ? <span class="string">"0"</span> + month : month; <span class="comment">// 태그를 "일기/2020/08" 처럼 만드려는 용도</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="built_in">parseInt</span>(timestamp[<span class="number">2</span>].substring(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> pm = timestamp[<span class="number">4</span>] === <span class="string">"오후"</span>;</span><br><span class="line"><span class="keyword">const</span> hour = <span class="built_in">parseInt</span>(timestamp[<span class="number">5</span>].split(<span class="string">":"</span>)[<span class="number">0</span>]) + (pm ? <span class="number">12</span> : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> minute = <span class="built_in">parseInt</span>(timestamp[<span class="number">5</span>].split(<span class="string">":"</span>)[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">const</span> second = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createdAt = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">createdAt.setYear(year);</span><br><span class="line">createdAt.setMonth(month - <span class="number">1</span>);</span><br><span class="line">createdAt.setDate(date)</span><br><span class="line">createdAt.setHours(hour);</span><br><span class="line">createdAt.setMinutes(minute);</span><br><span class="line">createdAt.setSeconds(second);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 20200819T011503Z 이런 포맷이 됩니다.</span></span><br><span class="line"><span class="keyword">const</span> created = createdAt.toISOString().replace(<span class="regexp">/[-:]/gi</span>, <span class="string">""</span>).substring(<span class="number">0</span>, <span class="number">15</span>) + <span class="string">"Z"</span>;</span><br><span class="line"><span class="keyword">const</span> tag = <span class="string">`일기/<span class="subst">$&#123;year&#125;</span>/<span class="subst">$&#123;paddedMonth&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;div&gt;&lt;/div&gt; 블럭으로 감싸야 개행의 단위가 됩니다.</span></span><br><span class="line"><span class="comment">// &lt;tag&gt;&lt;/tag&gt; 안에 넣어야 태그로 인식됩니다. 본문에 #태그 이런식으로 하면 인식이 안됩니다.</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">noteBody += <span class="string">`&lt;note&gt;&lt;title&gt;<span class="subst">$&#123;title.replace(<span class="string">"&amp;"</span>, <span class="string">"&amp;amp;"</span>)&#125;</span>&lt;/title&gt;&lt;content&gt;&lt;![CDATA[&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"&gt;</span></span><br><span class="line"><span class="string">&lt;en-note&gt;&lt;div&gt;<span class="subst">$&#123;text.replace(<span class="regexp">/\n/ig</span>, <span class="string">"&lt;/div&gt;&lt;div&gt;"</span>)&#125;</span>&lt;/div&gt;&lt;/en-note&gt;</span></span><br><span class="line"><span class="string">]]&gt;&lt;/content&gt;&lt;created&gt;<span class="subst">$&#123;created&#125;</span>&lt;/created&gt;&lt;updated&gt;<span class="subst">$&#123;created&#125;</span>&lt;/updated&gt;&lt;note-attributes&gt;&lt;source&gt;mobile.iphone&lt;/source&gt;&lt;reminder-order&gt;0&lt;/reminder-order&gt;&lt;tag&gt;<span class="subst">$&#123;tag&#125;</span>&lt;/tag&gt;&lt;/note-attributes&gt;&lt;/note&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = xmlHeader + noteBody + <span class="string">"&lt;/en-export&gt;"</span>;</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'pencake.enex'</span>, result, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'write end'</span>) &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>xml builder 이런거 안써도 됩니다. 그냥 이렇게 빨리빨리 개발하는게 개발입니다. 굳이 이런 잡일에 정석을 따질일은 없겠죠?<br>실행은 아래와같이 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pencake.enex 라는 파일이 생성됩니다.</span></span><br><span class="line">$ node convertToEnex.js</span><br></pre></td></tr></table></figure><h2 id="enex-import-결과물"><a href="#enex-import-결과물" class="headerlink" title="enex import 결과물"></a>enex import 결과물</h2><img src="/2020/08/20/bear-migration/bear2.png"><p>Bear는 이렇게 태그를 ‘/‘로 구분한 텍스트로 지정하면 폴더구조를 만들어줍니다.<br>위 코드의 <code>&lt;tag&gt;</code> 항목에 잘 넣었더니 보기좋게 정리되었습니다.</p><p>캡쳐는 안했지만, 타임스탬프도 실제 작성 시간으로 잘 들어갔고요.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>개발자는 이런 잡일을 할때 가끔씩 편할때가 있습니다.<br>저는 코딩을 반드시 배워야된다고 생각하는 사람은 아닙니다.<br>다만 스크립트 언어를 간단하게 다룰줄 알면 이런 삽질할때 굉장히 큰 도움이 된답니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2020/08/20/bear-migration/#disqus_thread</comments>
    </item>
    
    <item>
      <title>jpa, PK가 auto increment인데, PK 값을 강제로 지정하고 싶을 때</title>
      <link>https://mingpd.github.io/2019/09/27/develop/jpa-pk-overwrite/</link>
      <guid>https://mingpd.github.io/2019/09/27/develop/jpa-pk-overwrite/</guid>
      <pubDate>Fri, 27 Sep 2019 02:30:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;How to specify the @Id value on auto increment field with JPA.&lt;/p&gt;
&lt;p&gt;@GeneratedValue(strategy = GenerationType.IDENTITY) 필드에 때때로 값을 강제로 할당하고자 할 경우가 있습니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><h2 id="일반적인-JPA의-id-컬럼-설정-방법"><a href="#일반적인-JPA의-id-컬럼-설정-방법" class="headerlink" title="일반적인 JPA의 id 컬럼 설정 방법"></a>일반적인 JPA의 id 컬럼 설정 방법</h2><p>JPA에서 mysql과 같이 auto increment PK를 사용하는 경우 아래처럼 작성합니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"products"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// .. 기타등등 필드</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>이러면 entity 생성시 위 id에 뭘 안넣어도 JPA가 auto increment 다음 값을 가져와서 entity에 값을 잘 설정해줍니다.</p><h2 id="만약-이런-경우라면"><a href="#만약-이런-경우라면" class="headerlink" title="만약 이런 경우라면..?"></a>만약 이런 경우라면..?</h2><p>우리가 어떤 두 시스템을 통합한다고 가정합시다.<br>라이브 중인 서비스는 이미 이 통합작업을 고려하여 auto increment 값이 10000000번 부터 시작된 프로젝트입니다.<br>마이그레이션 할 데이터들의 PK는 1번부터 시작하며 100만건 남짓 입니다.<br>따라서 라이브중인 시스템과 마이그레이션 할 대상의 시스템의 PK는 겹치지 않습니다.<br>이 두 시스템의 데이터를 합쳐야 합니다.</p><p><br><br>요약하면, 마이그레이션 데이터의 PK를 유지한채 현 라이브중인 시스템으로 가져와야 된다는 의미입니다.<br><br><br>아래처럼 하면 쉽게 될것 같지만.. 과연 그럴까요?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">migrate</span><span class="params">(Long originalPK)</span> </span>&#123;</span><br><span class="line">    Product p = <span class="keyword">new</span> Product();</span><br><span class="line">    p.setId(originalPK);    <span class="comment">// 가져올 데이터베이스의 PK값을 강제로 id필드에 할당</span></span><br><span class="line">    productRepository.save(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>결론은, 안됩니다. auto increment 컬럼과 매핑된 <code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code> 이 속성의 @Id 필드에는요.<br>자동으로 auto increment 다음 값을 가져와서 넣어버립니다.</p><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p>많은 삽질을 해본 결과 아래와 같은 답을 찾았습니다. IdGenerator를 커스터마이징 하는 방법입니다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"products"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"productId"</span>, strategy = <span class="string">"com.mingpd.jpa.ProductIdGenerator"</span>)</span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"productId"</span>) <span class="comment">// 위 name과 같은 이름을 써줍시다.</span></span><br><span class="line"><span class="comment">//  @GeneratedValue(strategy = GenerationType.IDENTITY) // identity 전략은 사용하지 않습니다.</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// .. 기타등등 필드</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>이제 ProductIdGenerator를 아래처럼 만들어봅시다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.engine.spi.SharedSessionContractImplementor;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.id.IdentityGenerator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.minpd.domain.Product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductIdGenerator</span> <span class="keyword">extends</span> <span class="title">IdentityGenerator</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Serializable <span class="title">generate</span><span class="params">(SharedSessionContractImplementor session, Object object)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (object <span class="keyword">instanceof</span> Product) &#123;</span><br><span class="line">Product p = (Product) object;</span><br><span class="line"><span class="keyword">return</span> p.getId() == <span class="keyword">null</span> ? <span class="keyword">super</span>.generate(session, object) : p.getId();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Product entity가 아니에요."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 이것도 됨</span></span><br><span class="line"><span class="comment">Serializable id = session.getEntityPersister(null, object).getClassMetadata().getIdentifier(object, session);</span></span><br><span class="line"><span class="comment">return id != null ? id : super.generate(session, object);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>IdentityGenerator 클래스를 상속받아 만들었는데요. 이놈이 뭐하는애냐면, PK 생성이 IDENTITY 전략일 때 불리는 애 입니다.<br>쉽게 말해, 현재 Product 엔티티의 id가 null일때만 auto increment를 이용하겠다는 의미입니다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>사실 이 방법이 올바른건진 잘 모르겠으나, 일단 되긴 됩니다. 그럼 됐죠 뭐..</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/09/27/develop/jpa-pk-overwrite/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ionic, local notification 사용하기</title>
      <link>https://mingpd.github.io/2019/08/06/develop/ionic-4/</link>
      <guid>https://mingpd.github.io/2019/08/06/develop/ionic-4/</guid>
      <pubDate>Tue, 06 Aug 2019 07:31:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;로컬 푸시 노티를 다루는 방법을 알아봅니다.&lt;br&gt;알람 설정 등에서 사용할 수 있는 기능입니다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><p>로컬 푸시 노티를 다루는 방법을 알아봅니다.<br>알람 설정 등에서 사용할 수 있는 기능입니다.</p><h2 id="Local-Notifications"><a href="#Local-Notifications" class="headerlink" title="Local Notifications"></a>Local Notifications</h2><p>자세한 사항은 이 문서를 참고해주세요. <a href="https://ionicframework.com/docs/native/local-notifications" rel="external nofollow noopener noreferrer" target="_blank">Local Notifications</a><br>우선 플러그인을 설치해야 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ionic cordova plugin add cordova-plugin-local-notification</span><br><span class="line">$ npm install @ionic-native/<span class="built_in">local</span>-notifications</span><br></pre></td></tr></table></figure><p>AppModule.ts에 아래처럼 의존성을 넣어주도록 합시다.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.. 여러 import들 생략</span></span><br><span class="line"><span class="keyword">import</span> &#123;LocalNotifications&#125; <span class="keyword">from</span> <span class="string">'@ionic-native/local-notifications/ngx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [AppComponent],</span><br><span class="line">  imports: [</span><br><span class="line">    <span class="comment">// 생략</span></span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    <span class="comment">// 필요한 의존성들 알아서 잘,,</span></span><br><span class="line">    LocalNotifications,</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [AppComponent],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>LocalNotifications를 이용하여 스케쥴을 설정하게 됩니다. 참고로 이놈은 cordova 플러그인 문서를 참고하시면 좋습니다.<br><a href="https://github.com/katzer/cordova-plugin-local-notifications" rel="external nofollow noopener noreferrer" target="_blank">cordova-plugin-local-notifications</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> NotificationService &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> localNotifications: LocalNotifications</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.localNotifications.schedule(&#123;</span><br><span class="line">      <span class="comment">// 참고로 아이디를 지정해주지 않으면 특정 기본값으로 들어가는것 같음,</span></span><br><span class="line">      <span class="comment">// 따라서 여러 알람을 설정하려면 반드시 id를 구분해서 넣도록 하자.</span></span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">'푸시 제목'</span>,</span><br><span class="line">      text: <span class="string">'푸시 본문,, 몇줄까지 되는지는 잘 모르겠음'</span>,</span><br><span class="line">      trigger: &#123;every: &#123;hour: <span class="number">7</span>, minute: <span class="number">20</span>, weekday: <span class="number">0</span>&#125;&#125;, <span class="comment">// weekday는 0 ~ 6 (일월화수목금토)</span></span><br><span class="line">      foreground: <span class="literal">true</span>, <span class="comment">// 앱이 켜져있을때도 상단 바에 푸시를 받을지 말지</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cancel(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// 앱에 있는 모든 알림 삭제</span></span><br><span class="line">    <span class="keyword">this</span>.localNotifications.cancel(<span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// optional callback</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 앱에 있는 모든 알림 삭제</span></span><br><span class="line">    <span class="keyword">this</span>.localNotifications.cancelAll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// optional callback</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cancel 말고 clear도 있는데 무슨차이인지 정확히 모르겠음,, 무튼 cancel쓰면 멈추긴 한다는거...</span></span><br><span class="line">    <span class="comment">// this.localNotifications.clear(1);</span></span><br><span class="line">    <span class="comment">// this.localNotifications.clearAll();</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>주석에 설명을 다 달아두었습니다. 생각보다 별거 아닌건데 이게 weekday 값이 어떻게 들어가는 건지 몰라서 매우 삽질했네요.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>개인적으로 ionic 문서가 별로 맘에 안듭니다. 대충 써있고 세세한부분이 안써있어서요.<br>아님 그냥 제 html 컴포넌트 관련 지식이 얕아서 일수도 있습니다. weekday 때문에 이렇게 삽질할 줄은..</p><p><a href="https://ionicframework.com/docs/native/local-notifications" rel="external nofollow noopener noreferrer" target="_blank">Local Notifications</a><br><a href="https://github.com/katzer/cordova-plugin-local-notifications" rel="external nofollow noopener noreferrer" target="_blank">cordova-plugin-local-notifications</a></p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/08/06/develop/ionic-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ionic, ion-select 사용하기</title>
      <link>https://mingpd.github.io/2019/08/06/develop/ionic-3/</link>
      <guid>https://mingpd.github.io/2019/08/06/develop/ionic-3/</guid>
      <pubDate>Tue, 06 Aug 2019 07:21:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;select box를 다루는 방법을 알아봅니다.&lt;br&gt;여러개를 선택할 수 있는 Multiple Selection을 알아봅니다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><p>select box를 다루는 방법을 알아봅니다. 여러개를 선택할 수 있는 Multiple Selection을 알아봅니다.<br>아래와 같은 화면 입니다.<br><img src="/2019/08/06/develop/ionic-3/1.png"></p><h2 id="ion-select"><a href="#ion-select" class="headerlink" title="ion-select"></a>ion-select</h2><p>자세한 사항은 이 문서를 참고해주세요. <a href="https://ionicframework.com/docs/api/select#multiple-selection" rel="external nofollow noopener noreferrer" target="_blank">Multiple-Selection</a><br>아래 코드 처럼 ion-select를 설정해주는데요. 제 경우 요일을 고르는 선택지가 필요해서 아래처럼 코딩했습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-select</span> <span class="attr">multiple</span>=<span class="string">"true"</span> <span class="attr">cancelText</span>=<span class="string">"취소"</span> <span class="attr">okText</span>=<span class="string">"선택"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"dayOfWeek"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ion-select-option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>일<span class="tag">&lt;/<span class="name">ion-select-option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ion-select-option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>월<span class="tag">&lt;/<span class="name">ion-select-option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ion-select-option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>화<span class="tag">&lt;/<span class="name">ion-select-option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ion-select-option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>수<span class="tag">&lt;/<span class="name">ion-select-option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ion-select-option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>목<span class="tag">&lt;/<span class="name">ion-select-option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ion-select-option</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span>금<span class="tag">&lt;/<span class="name">ion-select-option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ion-select-option</span> <span class="attr">value</span>=<span class="string">"6"</span>&gt;</span>토<span class="tag">&lt;/<span class="name">ion-select-option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ion-select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 코드의 [(ngModel)]=”dayOfWeek” 이부분 때문에 삽질을 많이 했습니다. 과연 저기에 어떤 값이 들어가야 할지 때문이죠.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AlarmDetailComponent <span class="keyword">implements</span> AfterViewInit &#123;</span><br><span class="line">  <span class="comment">// .. 중략</span></span><br><span class="line">  dayOfWeek: (<span class="built_in">number</span> | <span class="built_in">string</span>)[] = [<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>];</span><br><span class="line">  <span class="comment">// .. 후략 ..</span></span><br></pre></td></tr></table></figure><p>이렇게 string의 배열로 넣으면 됩니다. 제가 웹에 대한 지식이 얕아서 그런지 이거 몰라서 한참 해맸네요.<br>예를들어, [‘1’, ‘3’, ‘5’] 이면 월수금 입니다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>가끔은 너무 어이없는 부분에서 삽질을 하기도 합니다.<br><a href="https://ionicframework.com/docs/api/select#multiple-selection" rel="external nofollow noopener noreferrer" target="_blank">Multiple-Selection</a>에서 더 많은 것들을 확인 할 수 있습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/08/06/develop/ionic-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>python 기초 강좌 3 - 함수</title>
      <link>https://mingpd.github.io/2019/07/04/workroom/python-beginner-3/</link>
      <guid>https://mingpd.github.io/2019/07/04/workroom/python-beginner-3/</guid>
      <pubDate>Thu, 04 Jul 2019 13:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;함수에 대한 개념과 문법을 알아봅시다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --><br>함수에 대한 개념과 문법을 알아봅시다.<br>자세한 내용은 <a href="https://wikidocs.net/24" rel="external nofollow noopener noreferrer" target="_blank">04-1 함수 - 점프 투 파이썬</a>을 참고하도록 합시다.</p><h2 id="함수를-왜-쓰나"><a href="#함수를-왜-쓰나" class="headerlink" title="함수를 왜 쓰나?"></a>함수를 왜 쓰나?</h2><p>지난 강의를 생각해보며 반복문을 이용해 구구단 2단을 출력해봅시다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">value = <span class="number">2</span> * x</span><br><span class="line">print(<span class="string">'2 x '</span> + str(x) + <span class="string">' = '</span> + str(value))</span><br></pre></td></tr></table></figure></p><p>프로그램의 요구사항이 늘었습니다. 2단 뒤에 3단을 출력해봅시다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">value = <span class="number">2</span> * x</span><br><span class="line">print(<span class="string">'2 x '</span> + str(x) + <span class="string">' = '</span> + str(value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">value = <span class="number">3</span> * x</span><br><span class="line">print(<span class="string">'3 x '</span> + str(x) + <span class="string">' = '</span> + str(value))</span><br></pre></td></tr></table></figure></p><p>프로그램의 요구사항이 더 늘었습니다. 2단 뒤에 3단 뒤에 … 30단까지을 출력해봅시다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">value = <span class="number">2</span> * x</span><br><span class="line">print(<span class="string">'2 x '</span> + str(x) + <span class="string">' = '</span> + str(value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">value = <span class="number">3</span> * x</span><br><span class="line">print(<span class="string">'3 x '</span> + str(x) + <span class="string">' = '</span> + str(value))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">value = <span class="number">30</span> * x</span><br><span class="line">print(<span class="string">'30 x '</span> + str(x) + <span class="string">' = '</span> + str(value))</span><br></pre></td></tr></table></figure></p><p>위 프로그램은 뭐가 문제가 있을까요? 똑같은 기능의 코드를 여러번 복붙한다는 문제가 있습니다.<br>만약 print() 안에 들어가는 글자들의 포맷을 바꾸고 싶다면? 30부분의 코드를 전부 수정해야 합니다.<br>게다가 로직이 30개중 한개라도 틀린다면? 프로그램상 버그라고 볼 수 있습니다.<br>따라서 이 기능을 수행하는 코드 블록을 묶어두고, 그걸 잘 이용하는 구조로 만들면 더 수월하겠죠?<br>이 때 사용하는 기능이 바로 함수입니다. </p><h2 id="함수-문법"><a href="#함수-문법" class="headerlink" title="함수 문법"></a>함수 문법</h2><p>함수는 아래처럼 만듭니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수에서 받을 인수를 명시함</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiple</span><span class="params">(dan)</span>:</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">value = dan * x</span><br><span class="line">print(str(dan) + <span class="string">' x '</span> + str(x) + <span class="string">' = '</span> + str(value))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 호출은 아래처럼 함수명 + 괄호 + 괄호안에 넘길 인수</span></span><br><span class="line">multiple(<span class="number">2</span>) <span class="comment"># 2단 출력  </span></span><br><span class="line">multiple(<span class="number">3</span>) <span class="comment"># 3단 출력</span></span><br></pre></td></tr></table></figure><p>만약 함수가 특정한 값을 리턴한다면 아래처럼 return 키워드를 이용합니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiple</span><span class="params">(dan)</span>:</span></span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        value = dan * x</span><br><span class="line">        results.append(value)</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line"></span><br><span class="line">list1 = multiple(<span class="number">2</span>) <span class="comment"># 2단의 결과값이 있는 리스트</span></span><br><span class="line">list2 = multiple(<span class="number">3</span>) <span class="comment"># 3단의 결과값이 있는 리스트</span></span><br></pre></td></tr></table></figure></p><p>기본 개념은 위와 같습니다. 아래는 좀 더 편하게 쓰기위한 방법들입니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 인수를 지정해서 넘기기</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">    </span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>)       <span class="comment"># 기본 호출 방법, 함수 정의와 인수 순서를 맞춰야 한다.</span></span><br><span class="line">add(b=<span class="number">2</span>, a=<span class="number">1</span>)   <span class="comment"># 인수를 지정해서 넘길 수 있다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 넘길 인수의 개수가 가변적일 때, *를 인수앞에 붙인다.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_many</span><span class="params">(*args)</span>:</span> </span><br><span class="line">     result = <span class="number">0</span> </span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> args: </span><br><span class="line">         result = result + i </span><br><span class="line">     <span class="keyword">return</span> result </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 호출은 아래처럼, 개수가 정해지지 않은 인자를 넘길 수 있다.    </span></span><br><span class="line">result = add_many(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">result = add_many(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">################## </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 인수의 기본값 정하기, 맨 뒤 인자일 경우 생략 가능</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line">result = add(<span class="number">1</span>)     <span class="comment"># 인수로 1, 2가 들어간다. (2는 위에서 정한 인수 기본값)</span></span><br><span class="line">result = add(<span class="number">1</span>, <span class="number">3</span>)  <span class="comment"># 인수로 1, 3이 들어간다. (인수 기본값을 무시)</span></span><br></pre></td></tr></table></figure></p><p>함수 내에서 사용하는 변수의 효력 범위에 대해 생각해봅시다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vartest</span><span class="params">(a)</span>:</span></span><br><span class="line">    a = a + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">vartest(a)</span><br><span class="line">print(a)        <span class="comment"># 과연 a의 결과는?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래는 어떨까요?</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vartest</span><span class="params">(a)</span>:</span></span><br><span class="line">    a = a + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">vartest(<span class="number">3</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><p>간단한 함수인 경우 길게 표현하기 귀찮으므로 한줄로 표현할 수 있습니다. 이를 람다(lambda)라고 합니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lambda 매개변수1, 매개변수2, ... : 매개변수를 이용한 표현식</span></span><br><span class="line">add = <span class="keyword">lambda</span> a, b: a+b</span><br><span class="line">result = add(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 위는 아래와 완벽히 동일합니다.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line">result = add(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="6365982398"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="연습문제"><a href="#연습문제" class="headerlink" title="연습문제"></a>연습문제</h2><ul><li>두 수를 인수로 받아 큰 수를 리턴하는 함수 만들기</li><li>문자열을 인수로 받아 거꾸로 리턴하는 함수 만들기, 예) ‘Hello World’ → ‘dlroW olleH’</li><li><p>반복문을 이용하여 아래처럼 * 피라미드를 만들되, 인수로 ‘줄번호’를 받는 함수 만들기</p><ul><li><p>1번 문제, ‘tryangle1(4)’ 처럼 호출</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">* *</span><br><span class="line">* * *</span><br><span class="line">* * * *</span><br></pre></td></tr></table></figure></li><li><p>2번 문제, ‘tryangle2(3)’ 처럼 호출</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      *</span><br><span class="line">   * *</span><br><span class="line">* * *</span><br></pre></td></tr></table></figure></li><li><p>3번 문제, ‘tryangle3(5)’ 처럼 호출 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* * * * *</span><br><span class="line">* * * *</span><br><span class="line">* * *</span><br><span class="line">* *</span><br><span class="line">*</span><br></pre></td></tr></table></figure></li><li><p>4번 문제, ‘tryangle4(4)’ 처럼 호출</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* * * *</span><br><span class="line">   * * *</span><br><span class="line">      * *</span><br><span class="line">         *</span><br></pre></td></tr></table></figure></li></ul></li><li><p>총 학생의 시험 점수가 아래와 같을때 아래의 함수 만들기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scores = [</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'mingus'</span>, <span class="string">'score'</span>:<span class="number">100</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'nicole'</span>, <span class="string">'score'</span>:<span class="number">90</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'sia'</span>, <span class="string">'score'</span>:<span class="number">25</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'irene'</span>, <span class="string">'score'</span>:<span class="number">45</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'maia'</span>, <span class="string">'score'</span>:<span class="number">80</span>&#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><ul><li>총점 구하는 함수</li><li>평균 구하는 함수</li><li>최고득점자 찾는 함수</li><li>최저득점자 찾는 함수</li></ul></li></ul><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>여러분은 함수를 마스터 하셨습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/07/04/workroom/python-beginner-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>python 기초 강좌 2 - 수업의 최종 목표와 기초 문법</title>
      <link>https://mingpd.github.io/2019/07/01/workroom/python-beginner-2/</link>
      <guid>https://mingpd.github.io/2019/07/01/workroom/python-beginner-2/</guid>
      <pubDate>Mon, 01 Jul 2019 13:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;기초문법을 아주 빠르게 훑어보겠습니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --><br>수업의 최종 목표를 정한 다음에 기초문법을 아주 빠르게 훑어보도록 하겠습니다.<br>자세한 내용은 <a href="https://wikidocs.net/book/1" rel="external nofollow noopener noreferrer" target="_blank">점푸 투 파이썬</a>을 참고하도록 합시다.</p><h2 id="최종-목표"><a href="#최종-목표" class="headerlink" title="최종 목표"></a>최종 목표</h2><p>원래는 인스타그램 태그 검색 API를 통해 데이터를 파싱하는게 목표였으나 현재 인스타그램 API를 쓰기 쉽지 않은 상황이므로 네이버 이미지검색 API를 사용하기로 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line">   -H <span class="string">"X-Naver-Client-Id:네이버 오픈 API 아이디"</span> \</span><br><span class="line">   -H <span class="string">"X-Naver-Client-Secret:네이버 오픈 API 비밀키"</span> \</span><br><span class="line"> <span class="string">'https://openapi.naver.com/v1/search/image?query=치킨&amp;display=10&amp;sort=sim&amp;start=1'</span></span><br></pre></td></tr></table></figure><p>위 API를 실행하면 아래와 같은 결과가 리턴됩니다.<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"lastBuildDate"</span>: <span class="string">"Mon, 01 Jul 2019 18:49:37 +0900"</span>,</span><br><span class="line"><span class="attr">"total"</span>: <span class="number">755639</span>,</span><br><span class="line"><span class="attr">"start"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"display"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">"items"</span>: [&#123;</span><br><span class="line"><span class="attr">"title"</span>: <span class="string">"BHC치킨 송정역점"</span>,</span><br><span class="line"><span class="attr">"link"</span>: <span class="string">"http://ldb.phinf.naver.net/20171211_237/1512973532440z1E5V_JPEG/9vzoOYbXljNrKeKVKn8FtOnB.jpg"</span>,</span><br><span class="line"><span class="attr">"thumbnail"</span>: <span class="string">"https://search.pstatic.net/common/?src=http://ldb.phinf.naver.net/20171211_237/1512973532440z1E5V_JPEG/9vzoOYbXljNrKeKVKn8FtOnB.jpg&amp;type=b150"</span>,</span><br><span class="line"><span class="attr">"sizeheight"</span>: <span class="string">"400"</span>,</span><br><span class="line"><span class="attr">"sizewidth"</span>: <span class="string">"540"</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"title"</span>: <span class="string">"60계 치킨 마곡점"</span>,</span><br><span class="line"><span class="attr">"link"</span>: <span class="string">"http://ldb.phinf.naver.net/20181016_21/1539669397893cVhPD_JPEG/plCjKmkVzK4jgT-l8MTL_v3Q.jpg"</span>,</span><br><span class="line"><span class="attr">"thumbnail"</span>: <span class="string">"https://search.pstatic.net/common/?src=http://ldb.phinf.naver.net/20181016_21/1539669397893cVhPD_JPEG/plCjKmkVzK4jgT-l8MTL_v3Q.jpg&amp;type=b150"</span>,</span><br><span class="line"><span class="attr">"sizeheight"</span>: <span class="string">"854"</span>,</span><br><span class="line"><span class="attr">"sizewidth"</span>: <span class="string">"1280"</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"title"</span>: <span class="string">"치킨파티 천북점"</span>,</span><br><span class="line"><span class="attr">"link"</span>: <span class="string">"http://ldb.phinf.naver.net/20161028_110/1477631570926FTKBN_PNG/065904c7-a4b5-44af-bc5d-2a8b9d7b732c.png"</span>,</span><br><span class="line"><span class="attr">"thumbnail"</span>: <span class="string">"https://search.pstatic.net/common/?src=http://ldb.phinf.naver.net/20161028_110/1477631570926FTKBN_PNG/065904c7-a4b5-44af-bc5d-2a8b9d7b732c.png&amp;type=b150"</span>,</span><br><span class="line"><span class="attr">"sizeheight"</span>: <span class="string">"900"</span>,</span><br><span class="line"><span class="attr">"sizewidth"</span>: <span class="string">"1200"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>이것을 자유자재로 파싱해보도록 하겠습니다. 이것이 궁극적인 목표입니다.</p><blockquote><p>JSON 초간단 요약<br>{} == key-value<br>[] == 리스트</p></blockquote><h2 id="기본-문법"><a href="#기본-문법" class="headerlink" title="기본 문법"></a>기본 문법</h2><h3 id="입력-출력"><a href="#입력-출력" class="headerlink" title="입력/출력"></a>입력/출력</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 샵 뒤에 쓰는 글은 주석입니다</span></span><br><span class="line">print(<span class="string">'헬로우월드'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># input()은 콘솔 입력을 받는다</span></span><br><span class="line">a = input()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h3 id="기본-타입과-연산"><a href="#기본-타입과-연산" class="headerlink" title="기본 타입과 연산"></a>기본 타입과 연산</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 숫자</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">print(a + b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열</span></span><br><span class="line">a = <span class="string">"hello"</span></span><br><span class="line">b = <span class="string">"world"</span></span><br><span class="line">print(a + <span class="string">" "</span> + b)</span><br><span class="line"></span><br><span class="line">print(a[<span class="number">2</span>]) <span class="comment"># 글자 한개 접근</span></span><br><span class="line"></span><br><span class="line">length = len(a + b) <span class="comment"># 문자열 길이</span></span><br><span class="line">print(length)</span><br><span class="line"></span><br><span class="line"><span class="comment"># boolean</span></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h3 id="그-외-자료형"><a href="#그-외-자료형" class="headerlink" title="그 외 자료형"></a>그 외 자료형</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</span><br><span class="line">print(a[<span class="number">1</span>])</span><br><span class="line">print(a[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">99</span> <span class="comment"># 값 바꾸기</span></span><br><span class="line">print(a[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">a.append(<span class="number">4</span>) <span class="comment"># 맨 뒤에 값 추가</span></span><br><span class="line">a.sort()    <span class="comment"># 오름차순 정렬</span></span><br><span class="line">a.reverse() <span class="comment"># 순서 뒤집기</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 튜플</span></span><br><span class="line">t = (<span class="string">'a'</span>, <span class="string">'b'</span>, (<span class="string">'ab'</span>, <span class="string">'cd'</span>))</span><br><span class="line">print(t[<span class="number">1</span>])</span><br><span class="line">print(t[<span class="number">-1</span>])</span><br><span class="line">t[<span class="number">1</span>] = <span class="number">99</span></span><br><span class="line">print(t[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 딕셔너리</span></span><br><span class="line">dic = &#123;<span class="string">'name'</span>:<span class="string">'mingus'</span>, <span class="string">'location'</span>:<span class="string">'pangyo'</span>&#125;</span><br><span class="line">print(dic[<span class="string">'name'</span>])</span><br><span class="line">dic[<span class="string">'name'</span>] = <span class="string">'nicole'</span></span><br><span class="line">print(dic[<span class="string">'name'</span>])</span><br><span class="line">print(dic)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="조건문-if"><a href="#조건문-if" class="headerlink" title="조건문 (if)"></a>조건문 (if)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">money = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> money:</span><br><span class="line">    print(<span class="string">"택시를 타고 가라"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"걸어 가라"</span>)</span><br></pre></td></tr></table></figure><h3 id="반복문-for"><a href="#반복문-for" class="headerlink" title="반복문 (for)"></a>반복문 (for)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># range</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>,<span class="number">1</span>,<span class="number">-1</span>):</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 리스트</span></span><br><span class="line">test_list = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>] </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test_list: </span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 튜플</span></span><br><span class="line">a = [(<span class="number">1</span>,<span class="number">2</span>), (<span class="number">3</span>,<span class="number">4</span>), (<span class="number">5</span>,<span class="number">6</span>)]</span><br><span class="line"><span class="keyword">for</span> (first, last) <span class="keyword">in</span> a:</span><br><span class="line">    print(first + last)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 한줄 표현식</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">result = [num * <span class="number">3</span> <span class="keyword">for</span> num <span class="keyword">in</span> a]</span><br><span class="line">print(result)    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="6365982398"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="연습문제"><a href="#연습문제" class="headerlink" title="연습문제"></a>연습문제</h2><ul><li>‘Hello World’를 출력하기</li><li>두 수를 입력 받아 큰 수를 출력하기</li><li>구구단 2단을 출력하기</li><li>구구단 2단의 답만 list 자료형에 넣기</li><li>구구단 짝수단만 출력하기 / list의 list로 넣기</li><li><p>반복문을 여러개 이용하여 아래처럼 * 피라미드를 만드시오</p><ul><li><p>1번 문제</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">* *</span><br><span class="line">* * *</span><br><span class="line">* * * *</span><br></pre></td></tr></table></figure></li><li><p>2번 문제</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">         *</span><br><span class="line">      * *</span><br><span class="line">   * * *</span><br><span class="line">* * * *</span><br></pre></td></tr></table></figure></li><li><p>3번 문제 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* * * *</span><br><span class="line">* * *</span><br><span class="line">* *</span><br><span class="line">*</span><br></pre></td></tr></table></figure></li><li><p>4번 문제</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* * * *</span><br><span class="line">   * * *</span><br><span class="line">      * *</span><br><span class="line">         *</span><br></pre></td></tr></table></figure></li></ul></li><li><p>‘Hello World’를 거꾸로 출력하기 → ‘dlroW olleH’</p></li><li>Let It Go 노래 가사에 ‘g’가 몇 번 들어있는지 세기</li><li>총 학생의 시험 점수가 아래와 같을때 60점이 넘으면 “PASS”, 아니면 “FAIL”을 학생의 이름과 함께 표시하시오.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scores = [</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'mingus'</span>, <span class="string">'score'</span>:<span class="number">100</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'nicole'</span>, <span class="string">'score'</span>:<span class="number">90</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'sia'</span>, <span class="string">'score'</span>:<span class="number">25</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'irene'</span>, <span class="string">'score'</span>:<span class="number">45</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'maia'</span>, <span class="string">'score'</span>:<span class="number">80</span>&#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>아래처럼 나오게 하면 성공<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mingus &quot;PASS&quot;</span><br><span class="line">nicole &quot;PASS&quot;</span><br><span class="line">sia &quot;FAIL&quot;</span><br><span class="line">irene &quot;FAIL&quot;</span><br><span class="line">maia &quot;PASS&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>여러분은 기초 문법을 마스터 하셨습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/07/01/workroom/python-beginner-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>python 기초 강좌 1 - 설치 및 환경설정</title>
      <link>https://mingpd.github.io/2019/06/19/workroom/python-beginner-1/</link>
      <guid>https://mingpd.github.io/2019/06/19/workroom/python-beginner-1/</guid>
      <pubDate>Wed, 19 Jun 2019 13:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;아는 기획자가 파이썬을 가르쳐 달라고 하여 파이썬 환경설정을 해보겠습니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><p>아는 기획자가 파이썬을 가르쳐 달라고 하여 파이썬 환경설정을 해보겠습니다. 환경은 macOS 입니다.<br>방법은 두 가지 입니다. 선호하는것을 고르시면 됩니다.</p><ul><li>Thonny 설치 (이것저것 세팅에 자신이 없는 분들께 추천)</li><li>Sublime Text 3를 이용한 개발환경 세팅</li></ul><h1 id="간단-설치-Thonny"><a href="#간단-설치-Thonny" class="headerlink" title="간단 설치 (Thonny)"></a>간단 설치 (Thonny)</h1><p>이 친구는 python3가 내장된 라이트한 에디터입니다. 약간 mac스러움과는 동떨어져 있지만 세팅이 귀찮으신 초보들에게 추천드립니다.<br><a href="https://thonny.org/" rel="external nofollow noopener noreferrer" target="_blank">https://thonny.org/</a><br>이걸 설치하셨다면 아래 과정은 다 안보셔도 됩니다.</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="6365982398"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h1 id="수동-설치-Sublime-Text-3-이용"><a href="#수동-설치-Sublime-Text-3-이용" class="headerlink" title="수동 설치 (Sublime Text 3 이용)"></a>수동 설치 (Sublime Text 3 이용)</h1><p>아래부터는 Sublime Text 3에 설치하기 위한 과정을 소개하겠습니다.</p><h2 id="homebrew-설치"><a href="#homebrew-설치" class="headerlink" title="homebrew 설치"></a>homebrew 설치</h2><p>우선 homebrew부터 설치하도록 합시다.<br>(자세한 사항은 이 링크를 참고합니다. <a href="https://brew.sh/index_ko" rel="external nofollow noopener noreferrer" target="_blank">https://brew.sh/index_ko</a>)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></p><h2 id="python3-설치"><a href="#python3-설치" class="headerlink" title="python3 설치"></a>python3 설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install python3</span><br></pre></td></tr></table></figure><p>아래처럼 실행해봅니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python 3.6.5 (default, Mar 30 2018, 06:41:53)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>위 처럼 뭔가 잘 나오면 성공입니다. 종료시에는 ‘Ctrl+D’ 를 누릅니다.</p><h2 id="Sublime-Text-설정"><a href="#Sublime-Text-설정" class="headerlink" title="Sublime Text 설정"></a>Sublime Text 설정</h2><p><a href="https://www.sublimetext.com/" rel="external nofollow noopener noreferrer" target="_blank">https://www.sublimetext.com/</a>를 참고하여 설치 후 실행합니다.<br>‘Tools → Build System → New Build System…’ 을 선택합니다.<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"cmd"</span>: [<span class="string">"/usr/local/bin/python3"</span>, <span class="string">"-u"</span>, <span class="string">"$file"</span>],</span><br><span class="line"><span class="attr">"file_regex"</span>: <span class="string">"^[ ]*File \"(...*?)\", line ([0-9]*)"</span>,</span><br><span class="line"><span class="attr">"selector"</span>: <span class="string">"source.python"</span>,</span><br><span class="line"><span class="attr">"env"</span>: &#123;<span class="attr">"PYTHONIOENCODING"</span>: <span class="string">"utf8"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>위를 복사하여 붙여넣고 ⌘S를 눌러 저장합니다. 파일명은 ‘Python3.sublime-build’로 합니다.<br>(/Users/유저명/Library/Application Support/Sublime Text 3/Packages/User 에 저장됨.)</p><h2 id="Sublime-Text에서-빌드하기"><a href="#Sublime-Text에서-빌드하기" class="headerlink" title="Sublime Text에서 빌드하기"></a>Sublime Text에서 빌드하기</h2><p>File → New File’ 혹은 ⌘N으로 새 파일을 만듭니다.<br>⌘S를 눌러 저장합니다. 단, 파일의 확장자는 ‘.py’로 합니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello World!!"</span>)</span><br></pre></td></tr></table></figure><br>위처럼 아무 파이썬 코드를 넣고 ⌘B를 눌러 빌드 합니다. </p><img src="/2019/06/19/workroom/python-beginner-1/1.png"><p>위 처럼 다이얼로그가 나타나면 ‘Python3’를 선택합니다. (한 번 선택하면 그 후 부터는 나오지 않습니다.)</p><h2 id="mac-파일-설정-변경"><a href="#mac-파일-설정-변경" class="headerlink" title="mac 파일 설정 변경"></a>mac 파일 설정 변경</h2><p>이건 필요하신 분들만 하세요. ‘.py’ 파일을 항상 sublime text로 열기 위한 설정입니다.<br>‘.py’ 파일위에서 오른쪽 버튼을 눌러 ‘정보 가져오기’를 선택합니다.<br><img src="/2019/06/19/workroom/python-beginner-1/2.png"></p><p>‘다음으로 열기’ 항목에서 ‘Sublime Text.app’ 선택 후 하단 ‘모두 변경’ 버튼을 선택합니다.<br><img src="/2019/06/19/workroom/python-beginner-1/3.png"><br>다이얼로그가 나타나면 ‘계속’ 을 선택합니다.<br>이제 앞으로 ‘.py’ 파일을 더블클릭하면 Sublime Text로 열립니다.</p><h2 id="SublimeREPL-설치"><a href="#SublimeREPL-설치" class="headerlink" title="SublimeREPL 설치"></a>SublimeREPL 설치</h2><p>input() 등 유저 인터렉티브한 실행이 안되서 추가적으로 이놈을 설치해줘야 합니다.<br>⌘⇧P를 눌러봅니다. Install Package를 고릅니다.<br><img src="/2019/06/19/workroom/python-beginner-1/4.png"></p><p>뭐가 뜨면 SublimeREPL 을 선택하여 설치합니다.<br><img src="/2019/06/19/workroom/python-beginner-1/5.png"></p><p>설치가 다 되면 단축키 설정을 위해 ‘Preference - Key Binding’ 으로 들어갑니다.<br><img src="/2019/06/19/workroom/python-beginner-1/6.png"></p><p>아래 코드를 [] 사이에 붙여넣고 저장합니다.<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"keys"</span>:[<span class="string">"command+shift+b"</span>], <span class="attr">"command"</span>:<span class="string">"run_existing_window_command"</span>, <span class="attr">"args"</span>:&#123;<span class="attr">"id"</span>: <span class="string">"repl_python_run"</span>, <span class="attr">"file"</span>: <span class="string">"config/Python/Main.sublime-menu"</span>&#125; &#125;</span><br></pre></td></tr></table></figure></p><p>이제 ⌘⇧B를 누르면 REPL 창에 실행이 됩니다.<br>그런데 mac에 기본적으로 python 2.x가 설치되어있어서 자꾸 그놈이 실행되는군요. 바꾸도록 합시다.<br>아래 경로의 파일을 열어봅시다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/유저명/Library/Application Support/Sublime Text 3/Packages/SublimeREPL/config/Python/Main.sublime-menu</span><br></pre></td></tr></table></figure></p><p>아래에서 “cmd”를 키로 갖는 부분의 “python”을 모두 “python3”로 바꾸도록 합시다.<br><figure class="highlight javascript"><figcaption><span>Main.sublime-menu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"tools"</span>,</span><br><span class="line">        <span class="string">"children"</span>:</span><br><span class="line">        [&#123;</span><br><span class="line">            <span class="string">"caption"</span>: <span class="string">"SublimeREPL"</span>,</span><br><span class="line">            <span class="string">"mnemonic"</span>: <span class="string">"R"</span>,</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"SublimeREPL"</span>,</span><br><span class="line">            <span class="string">"children"</span>:</span><br><span class="line">            [</span><br><span class="line">                &#123;<span class="string">"caption"</span>: <span class="string">"Python"</span>,</span><br><span class="line">                <span class="string">"id"</span>: <span class="string">"Python"</span>,</span><br><span class="line"></span><br><span class="line">                 <span class="string">"children"</span>:[</span><br><span class="line">                    &#123;<span class="string">"command"</span>: <span class="string">"repl_open"</span>,</span><br><span class="line">                     <span class="string">"caption"</span>: <span class="string">"Python"</span>,</span><br><span class="line">                     <span class="string">"id"</span>: <span class="string">"repl_python"</span>,</span><br><span class="line">                     <span class="string">"mnemonic"</span>: <span class="string">"P"</span>,</span><br><span class="line">                     <span class="string">"args"</span>: &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"subprocess"</span>,</span><br><span class="line">                        <span class="string">"encoding"</span>: <span class="string">"utf8"</span>,</span><br><span class="line">                        <span class="string">"cmd"</span>: [<span class="string">"python3"</span>, <span class="string">"-i"</span>, <span class="string">"-u"</span>],     <span class="comment">// 여기</span></span><br><span class="line">                        <span class="string">"cwd"</span>: <span class="string">"$file_path"</span>,</span><br><span class="line">                        <span class="string">"syntax"</span>: <span class="string">"Packages/Python/Python.tmLanguage"</span>,</span><br><span class="line">                        <span class="string">"external_id"</span>: <span class="string">"python"</span>,</span><br><span class="line">                        <span class="string">"extend_env"</span>: &#123;<span class="string">"PYTHONIOENCODING"</span>: <span class="string">"utf-8"</span>&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;<span class="string">"command"</span>: <span class="string">"python_virtualenv_repl"</span>,</span><br><span class="line">                     <span class="string">"id"</span>: <span class="string">"python_virtualenv_repl"</span>,</span><br><span class="line">                     <span class="string">"caption"</span>: <span class="string">"Python - virtualenv"</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">"command"</span>: <span class="string">"repl_open"</span>,</span><br><span class="line">                     <span class="string">"caption"</span>: <span class="string">"Python - PDB current file"</span>,</span><br><span class="line">                     <span class="string">"id"</span>: <span class="string">"repl_python_pdb"</span>,</span><br><span class="line">                     <span class="string">"mnemonic"</span>: <span class="string">"D"</span>,</span><br><span class="line">                     <span class="string">"args"</span>: &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"subprocess"</span>,</span><br><span class="line">                        <span class="string">"encoding"</span>: <span class="string">"utf8"</span>,</span><br><span class="line">                        <span class="string">"cmd"</span>: [<span class="string">"python3"</span>, <span class="string">"-i"</span>, <span class="string">"-u"</span>, <span class="string">"-m"</span>, <span class="string">"pdb"</span>, <span class="string">"$file_basename"</span>], <span class="comment">// 여기</span></span><br><span class="line">                        <span class="string">"cwd"</span>: <span class="string">"$file_path"</span>,</span><br><span class="line">                        <span class="string">"syntax"</span>: <span class="string">"Packages/Python/Python.tmLanguage"</span>,</span><br><span class="line">                        <span class="string">"external_id"</span>: <span class="string">"python"</span>,</span><br><span class="line">                        <span class="string">"extend_env"</span>: &#123;<span class="string">"PYTHONIOENCODING"</span>: <span class="string">"utf-8"</span>&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;<span class="string">"command"</span>: <span class="string">"repl_open"</span>,</span><br><span class="line">                     <span class="string">"caption"</span>: <span class="string">"Python - RUN current file"</span>,</span><br><span class="line">                     <span class="string">"id"</span>: <span class="string">"repl_python_run"</span>,</span><br><span class="line">                     <span class="string">"mnemonic"</span>: <span class="string">"R"</span>,</span><br><span class="line">                     <span class="string">"args"</span>: &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"subprocess"</span>,</span><br><span class="line">                        <span class="string">"encoding"</span>: <span class="string">"utf8"</span>,</span><br><span class="line">                        <span class="string">"cmd"</span>: [<span class="string">"python3"</span>, <span class="string">"-u"</span>, <span class="string">"$file_basename"</span>],      <span class="comment">// 여기</span></span><br><span class="line">                        <span class="string">"cwd"</span>: <span class="string">"$file_path"</span>,</span><br><span class="line">                        <span class="string">"syntax"</span>: <span class="string">"Packages/Python/Python.tmLanguage"</span>,</span><br><span class="line">                        <span class="string">"external_id"</span>: <span class="string">"python"</span>,</span><br><span class="line">                        <span class="string">"extend_env"</span>: &#123;<span class="string">"PYTHONIOENCODING"</span>: <span class="string">"utf-8"</span>&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;<span class="string">"command"</span>: <span class="string">"repl_open"</span>,</span><br><span class="line">                     <span class="string">"caption"</span>: <span class="string">"Python - IPython"</span>,</span><br><span class="line">                     <span class="string">"id"</span>: <span class="string">"repl_python_ipython"</span>,</span><br><span class="line">                     <span class="string">"mnemonic"</span>: <span class="string">"I"</span>,</span><br><span class="line">                     <span class="string">"args"</span>: &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="string">"subprocess"</span>,</span><br><span class="line">                        <span class="string">"encoding"</span>: <span class="string">"utf8"</span>,</span><br><span class="line">                        <span class="string">"autocomplete_server"</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="string">"cmd"</span>: &#123;</span><br><span class="line">                            <span class="string">"osx"</span>: [<span class="string">"python3"</span>, <span class="string">"-u"</span>, <span class="string">"$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py"</span>],      <span class="comment">// 여기</span></span><br><span class="line">                            <span class="string">"linux"</span>: [<span class="string">"python3"</span>, <span class="string">"-u"</span>, <span class="string">"$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py"</span>],    <span class="comment">// 여기</span></span><br><span class="line">                            <span class="string">"windows"</span>: [<span class="string">"python3"</span>, <span class="string">"-u"</span>, <span class="string">"$&#123;packages&#125;/SublimeREPL/config/Python/ipy_repl.py"</span>]   <span class="comment">// 여기</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">"cwd"</span>: <span class="string">"$file_path"</span>,</span><br><span class="line">                        <span class="string">"syntax"</span>: <span class="string">"Packages/Python/Python.tmLanguage"</span>,</span><br><span class="line">                        <span class="string">"external_id"</span>: <span class="string">"python"</span>,</span><br><span class="line">                        <span class="string">"extend_env"</span>: &#123;</span><br><span class="line">                            <span class="string">"PYTHONIOENCODING"</span>: <span class="string">"utf-8"</span>,</span><br><span class="line">                            <span class="string">"SUBLIMEREPL_EDITOR"</span>: <span class="string">"$editor"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>제대로 변경되었는지 확인하기 위해 아래코드를 돌려봅시다. 3.x의 버전으로 보인다면 성공입니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.version) </span><br></pre></td></tr></table></figure></p><h2 id="창-분할하기"><a href="#창-분할하기" class="headerlink" title="창 분할하기"></a>창 분할하기</h2><p>SublimeREPL로 빌드를 하면 계속 새 탭에 결과가 나오기 때문에 귀찮으므로 화면을 분리하여 사용하는게 편합니다.<br><img src="/2019/06/19/workroom/python-beginner-1/7.png"></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>굳이 고퀄의 IDE가 없더라도 무료로 환경을 구성할 수 있습니다. 근데 매우 귀찮네요.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/06/19/workroom/python-beginner-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>gradle 프로젝트에서 querydsl 설정하기</title>
      <link>https://mingpd.github.io/2019/05/20/develop/gradle-querydsl/</link>
      <guid>https://mingpd.github.io/2019/05/20/develop/gradle-querydsl/</guid>
      <pubDate>Mon, 20 May 2019 06:40:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;gradle 4.6 / querydsl 4.2.1 / spring-data-jpa 1.11.13.RELEASE / spring-data-mongodb 1.10.8.RELEASE&lt;br&gt;이 환경을 어떻게 gradle 설정으로 푸는지 정리힙니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --><br>일단 현재 저의 라이브러리 현황은 아래와 같습니다.</p><ul><li>gradle 4.6</li><li>querydsl 4.2.1</li><li>spring-data-jpa 1.11.13.RELEASE</li><li>spring-data-mongodb 1.10.8.RELEASE</li></ul><p>이 글을 보시는 분들이라면 spring-data-jpa, spring-data-mongodb, querydsl이 뭔진 다 아실테니 설명은 과감히 생략하겠습니다.</p><p>저희 프로젝트에서는 spring-data-jpa, spring-data-mongodb 둘 다 querydsl을 이용해 쿼리 해야할 필요가 있어서 설정을 해보았습니다.</p><h2 id="gradle-설정-build-gradle"><a href="#gradle-설정-build-gradle" class="headerlink" title="gradle 설정 (build.gradle)"></a>gradle 설정 (build.gradle)</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line">        <span class="comment">// ... 그냥 버전정보 전역으로 쓰려고 ..</span></span><br><span class="line">        springDataJpaVersion = <span class="string">'1.11.13.RELEASE'</span></span><br><span class="line">        springDataMongoDbVersion = <span class="string">'1.10.8.RELEASE'</span></span><br><span class="line">        queryDslVersion = <span class="string">'4.2.1'</span></span><br><span class="line">        queryDslPluginVersion = <span class="string">'1.0.9'</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dependencies &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        classpath <span class="string">"gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:$&#123;queryDslPluginVersion&#125;"</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    compile <span class="string">"org.springframework.data:spring-data-jpa:$&#123;springDataJpaVersion&#125;"</span></span><br><span class="line">    compile <span class="string">"org.springframework.data:spring-data-mongodb:$&#123;springDataMongoDbVersion&#125;"</span></span><br><span class="line">    compile <span class="string">"com.querydsl:querydsl-jpa:$&#123;queryDslVersion&#125;"</span></span><br><span class="line">    compile <span class="string">"com.querydsl:querydsl-mongodb:$&#123;queryDslVersion&#125;"</span></span><br><span class="line">    compileOnly <span class="string">"com.querydsl:querydsl-apt:$&#123;queryDslVersion&#125;"</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>일단 필요한 의존성 설정은 저렇게 됩니다. querydsl 설정은 아래처럼 하게됩니다.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> generatedQueryDslDir = <span class="string">'target/generated-sources/java'</span></span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDir generatedQueryDslDir</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">querydsl &#123;</span><br><span class="line">    jpa = <span class="literal">true</span></span><br><span class="line">    springDataMongo = <span class="literal">true</span></span><br><span class="line">    querydslDefault = <span class="literal">true</span></span><br><span class="line">    querydslSourcesDir = generatedQueryDslDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">project.afterEvaluate &#123;</span><br><span class="line">    project.tasks.compileQuerydsl.options.compilerArgs = [</span><br><span class="line">            <span class="string">"-proc:only"</span>,</span><br><span class="line">            <span class="string">"-processor"</span>, project.querydsl.processors() + <span class="string">',lombok.launch.AnnotationProcessorHider$AnnotationProcessor'</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 직접 명시할 경우 아래처럼</span></span><br><span class="line">            <span class="comment">// "-processor", 'com.querydsl.apt.jpa.JPAAnnotationProcessor,org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor,lombok.launch.AnnotationProcessorHider$AnnotationProcessor'</span></span><br><span class="line">            <span class="comment">// 혹은 "-processor", 'com.querydsl.apt.jpa.JPAAnnotationProcessor,com.querydsl.apt.QuerydslAnnotationProcessor,lombok.launch.AnnotationProcessorHider$AnnotationProcessor'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>(querydsl 블럭에 대한 정보는 <a href="https://github.com/ewerk/gradle-plugins/tree/master/querydsl-plugin" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ewerk/gradle-plugins/tree/master/querydsl-plugin</a> 여길 참고해주세요.)</p><p>사실 저도 완벽하게 이해하고 사용한 것은 아닙니다만.. 여기저기 구글링 한 후 조합한 결과가 저것입니다.<br>21번 줄 <code>project.querydsl.processors()</code> 이렇게 하면 이 프로젝트에 등록된 AnnotationProcessors가 그냥 다 들어가기 때문에 명시를 따로 안해줘도 됩니다만 직접 지정해야할 필요성이 있을때엔 24번 줄 주석처럼 하면 됩니다.</p><p>참고로 lombok 사용 중이면 <code>lombok.launch.AnnotationProcessorHider$AnnotationProcessor</code> 이걸 꼭 넣어야합니다. 안쓰면 안해도 됩니다.</p><p>이렇게 하면 jpa entity 객체와 mongo document 객체에 대한 QClass가 위 코드의 1번 줄에서 명시한 패스에 생성됩니다.</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="빌드-실패-해결-삽질기"><a href="#빌드-실패-해결-삽질기" class="headerlink" title="빌드 실패 해결 삽질기"></a>빌드 실패 해결 삽질기</h2><p>그런데, 저렇게 설정했는데 계속 빌드가 실패했습니다. 심지어 로그도 안남고요.<br>이 프로젝트는 maven으로 만들었던 다른 프로젝트의 일부를 그대로 가져와야 하는 작업이었는데요. 그때 복붙하다가 뭔가 잘못된게 있는것 같았습니다.<br>내부적으로 뭔가 충돌이 된것 같은데 알 수가 없어서 이것저것 코드를 몇 시간 살펴본 결과..</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@QueryProjection</span> <span class="comment">// 요놈이 문제다. 요놈 제거하자.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Option</span><span class="params">(OptionType type, List&lt;OptionCombination&gt; combinations)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.combinations = combinations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1번 줄의 <code>@QueryProjection</code>이 있는 코드를 넣었더니 Jpa, Mongo 관련 AnnotationProcessor들이 내부적으로 뭐 충돌이 있는건지 뭔지 빌드가 안되었습니다. 그래서 저 부분을 찾아 전부 없애줬더니 해결은 되었습니다.</p><p>다만, 저걸 필요해서 넣었던건데 없애버렸으니 query 할 때 다른 방법을 찾아봐야 할 것 같네요.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>결국 깊은 이해 없이 야매로 해결하긴 했습니다. 역시 CNP 개발 방법론(Copy &amp; Paste)에 의거하여 작업할 땐 조심해야 합니다.</p><p>그리고 작업자들끼리 gradle 쓰자고 맞춘거였는데.. maven 쓸 땐 이런 문제가 없었는데 괜히 gradle 도입해서.. 영 찝찝하게 됐네요.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/05/20/develop/gradle-querydsl/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ionic, 내비게이션 및 모달뷰 구성</title>
      <link>https://mingpd.github.io/2019/05/15/develop/ionic-2/</link>
      <guid>https://mingpd.github.io/2019/05/15/develop/ionic-2/</guid>
      <pubDate>Wed, 15 May 2019 04:21:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;ListView 아이템 클릭 → 내비게이션 화면 전환 → 그 화면에서 버튼 클릭 시 모달 뷰 띄우기&lt;br&gt;이런 간단한 화면 구성을 해보려고 합니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><img src="/2019/05/15/develop/ionic-2/1.gif"><p>위 처럼 ListView 아이템 클릭 → 내비게이션 화면 전환 → 그 화면에서 버튼 클릭 시 모달 뷰 띄우기<br>이런 간단한 화면 구성을 해보려고 합니다.</p><h2 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h2><p>저의 경우 만들어진 탭 페이지에 리스트뷰를 추가했습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>설정<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span> (<span class="attr">click</span>)=<span class="string">"goAlarm()"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span></span><br><span class="line">        메뉴1</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"arrow-forward"</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">slot</span>=<span class="string">"end"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span></span><br><span class="line">        메뉴2</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"arrow-forward"</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">slot</span>=<span class="string">"end"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure><p>사실 설명이 필요 없을것 같습니다. 다만 9번 줄에 click 이벤트를 건 점은 주목해야 합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;NavController&#125; <span class="keyword">from</span> <span class="string">'@ionic/angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-settings'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./settings.page.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./settings.page.scss'</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SettingsPage <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> navCtrl: NavController</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  goAlarm(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.navCtrl.navigateForward(<span class="string">'settings/alarm'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10번 줄 처럼 생성자에 <code>NavController</code> 를 Injection 받도록 합니다.<br>13번 줄의 goAlarm() 메소드 처럼 navigateForward 메소드에 이동할 페이지의 path를 적어주면 됩니다.<br>참고로 그 path는 routing module에서 설정한 라우트의 path 입니다.<br>결론적으로, 이동할 페이지의 path만 저렇게 넣어주면 알아서 다 됩니다. 참 쉽죠?</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="상세페이지에서-모달뷰-띄우기"><a href="#상세페이지에서-모달뷰-띄우기" class="headerlink" title="상세페이지에서 모달뷰 띄우기"></a>상세페이지에서 모달뷰 띄우기</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>알림<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-buttons</span> <span class="attr">slot</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-back-button</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-back-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-buttons</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-buttons</span> <span class="attr">slot</span>=<span class="string">"end"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-button</span> (<span class="attr">click</span>)=<span class="string">"openAlarmDetailModal()"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">slot</span>=<span class="string">"icon-only"</span> <span class="attr">name</span>=<span class="string">"add"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-buttons</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 필요한 거 넣자 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4번 줄처럼 back 버튼을 넣어줍니다. 텍스트나 아이콘 등의 커스터마이징도 가능합니다.<br>back 버튼의 경우는 별도 이벤트 코딩을 안해도 알아서 잘 작동합니다.</p><p>8번줄에 모달을 띄우기 위한 click 이벤트를 걸어줬습니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SettingsAlarmPage <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> modalController: ModalController</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> openAlarmDetailModal() &#123;</span><br><span class="line">    <span class="keyword">const</span> modal = <span class="keyword">await</span> <span class="keyword">this</span>.modalController.create(&#123;</span><br><span class="line">      component: SettingsAlarmDetailComponent,</span><br><span class="line">      componentProps: &#123;value: <span class="number">123</span>&#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> modal.present();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 페이지의 script 부분입니다.<br>2번 줄 처럼 생성자에 <code>ModalController</code> 를 Injection 받습니다.<br>8번 줄을 보면 알 수 있듯 저의 경우 <code>SettingsAlarmDetailComponent</code> 를 모달로 띄울것이라서 위 처럼 설정해주었습니다.</p><h2 id="모달뷰-닫기"><a href="#모달뷰-닫기" class="headerlink" title="모달뷰 닫기"></a>모달뷰 닫기</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>알림 설정<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-buttons</span> <span class="attr">slot</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-button</span> (<span class="attr">click</span>)=<span class="string">"dismissModal()"</span>&gt;</span></span><br><span class="line">        닫기</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-buttons</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-buttons</span> <span class="attr">slot</span>=<span class="string">"end"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-button</span> (<span class="attr">click</span>)=<span class="string">"saveAndDismissModal()"</span>&gt;</span></span><br><span class="line">        저장</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-buttons</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 필요한 것들 ..--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5번, 10번 줄에서 각 아이콘에 click 이벤트를 걸어줬습니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SettingsAlarmDetailComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> modalCtrl: ModalController</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  dismissModal() &#123;</span><br><span class="line">    <span class="keyword">this</span>.modalCtrl.dismiss();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  saveAndDismissModal() &#123;</span><br><span class="line">    <span class="keyword">this</span>.modalCtrl.dismiss();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 처럼 생성자에 <code>ModalController</code> 를 Injection 받습니다.<br>모달뷰를 닫는 건 저 한 메소드면 됩니다. 참 쉽죠? 물론 데이터 저장 등의 후 처리는 각자 알맞게 코딩합시다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>생각보다 너무 간단해서 딱히 추가할 말이 없네요.<br><a href="https://ionicframework.com/docs/components" rel="external nofollow noopener noreferrer" target="_blank">UI Components</a>에서 더 많은 것들을 확인 할 수 있습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/05/15/develop/ionic-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ionic framework, 소개 및 프로젝트 생성</title>
      <link>https://mingpd.github.io/2019/05/15/develop/ionic-1/</link>
      <guid>https://mingpd.github.io/2019/05/15/develop/ionic-1/</guid>
      <pubDate>Wed, 15 May 2019 04:21:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;js, html, css 등의 프론트엔드 기술로 하이브리드 앱을 만들 수 있는 Apache Cordova라는 프레임워크가 있는데요.&lt;br&gt;이것을 Angular 기반으로 개발할 수 있도록 만든 프레임워크가 바로 Ionic framework 입니다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><h2 id="Ionic-framework"><a href="#Ionic-framework" class="headerlink" title="Ionic framework?"></a>Ionic framework?</h2><p>설명이 길면 노잼이니 매우 간단히 설명하겠습니다.<br>js, html, css 등의 프론트엔드 기술로 하이브리드 앱을 만들 수 있는 Apache Cordova라는 프레임워크가 있는데요. 이것을 Angular 기반으로 개발할 수 있도록 만든 프레임워크가 바로 Ionic framework 입니다.<br>더 자세한 설명은 잘 설명 되어있는 아래 링크로 대체하겠습니다.<br><a href="https://ionicframework.com/docs/intro" rel="external nofollow noopener noreferrer" target="_blank">What is Ionic Framework?</a><br><a href="https://ithub.tistory.com/70" rel="external nofollow noopener noreferrer" target="_blank">ionic 프레임워크 소개</a></p><p>각 플랫폼 native api를 사용하지 않고 js, html, css등으로 앱을 개발하면 어떤 장점이 있을까요?<br>개발을 한 벌만 하고 여러 플랫폼으로 내보낼 수 있기 때문에 개발 공수가 덜 듭니다.<br>특히, 개발자가 angular에 능하다면 훨씬 더 생산성이 좋겠죠.</p><p>당연히 단점도 있습니다. 아무래도 고수준의 디바이스 제어는 사용이 제한될 수 밖에 없습니다.<br>물론 제가 ionic에 대해 모든걸 알고 있지는 못하여 어느수준까지 사용 가능한지는 모르겠습니다만<br>native api 보다는 기술이나 성능에 제약이 있을 수 밖에 없습니다.</p><p>ionic과 항상 같이 얘기되는 것이 React Native 입니다. 이 둘에 대한 비교는 아래 링크로 대체합니다.<br><a href="https://imcreator.tistory.com/142" rel="external nofollow noopener noreferrer" target="_blank">Ionic Vs. React Native, 어떤 프레임워크가 크로스 플랫폼 모바일 앱 개발에 좋을까</a><br>(NativeScript라는 것도 있는것 같은데 이건 잘 모르겠네요.)</p><p>따라서 개발에 착수하기 전 꼭 본인이 설계한 서비스의 스펙이<br>ionic으로 충분 할 것인지에 대해선 반드시 검토해볼 필요가 있습니다.</p><img src="/2019/05/15/develop/ionic-1/1.png"><p>뭐 당연한 얘기일진 모르겠으나 무료/유료냐에 따른 서포트 차이는 있습니다.</p><h2 id="Angular"><a href="#Angular" class="headerlink" title="Angular?"></a>Angular?</h2><p><a href="https://angular.io/" rel="external nofollow noopener noreferrer" target="_blank">Angular</a>에서 더 자세한 정보를 얻을 수 있습니다.</p><p>간단히 설명하면, 웹 프레임 워크입니다. 제가 잘 아는 프론트엔드 개발자에게 물어보니 React보다는 Angular를 선호한다고 하네요.<br>React나 Vue는 뷰 레벨의 템플릿을 잘 쓸 수 있게 해주는 솔루션인것 같은 느낌인데 반해 Angular는 그냥 모든게 다 들어있습니다. 마치 서버사이드로 치면 Spring 같다고 할까요.<br>그래서 오히려 서버 개발자들에게 Angular를 권하면 더 잘 따라오시는것 같습니다. 개인적으론 개발 패턴도 Spring과 비슷하다고 느꼈습니다.</p><p>물론 진입장벽이 꽤 있습니다. 일단 typescript로 개발을 해야하기 때문에 javascript에 익숙한 분들은 약간의 혼란이 있을 수 있습니다.<br>그리고 프레임워크이다보니 그 라이프사이클이나 컴포넌트, 패턴 등을 잘 익혀서 그에 맞게 꽂아줘야 합니다. 그 개념을 익히는것에 대한 부담도 있습니다.<br>단, 위에서 말씀드린것 처럼 Spring 같은 느낌이 있어서 서버 개발자들이 오히려 쉽게 습득할 수도 있습니다.</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="준비물"><a href="#준비물" class="headerlink" title="준비물"></a>준비물</h2><ul><li>nodejs</li><li>iOS 빌드 시엔 xcode.<ul><li>xcode 설치가 잘 안되면 링크를 참고하여 깨끗히 삭제한 후 <a href="https://devmjun.github.io/archive/Reduce-StorageInMac" rel="external nofollow noopener noreferrer" target="_blank">Xcode. Xcode 깨끗이 삭제하는 방법</a></li><li>safe mode로 부팅하여 다시 설치합니다.</li><li>참고로 safe mode는 컴터를 끄고 다시 켤때 shift를 누르고 있으면 됩니다.</li><li>자세한 건 여길 참고합니다. <a href="https://ionicframework.com/docs/installation/ios" rel="external nofollow noopener noreferrer" target="_blank">iOS Setup</a></li></ul></li><li>Android 빌드 시엔 Android Studio.<ul><li>JDK 8, Gradle 등도 같이 설치</li><li>자세한 건 여길 참고합니다. <a href="https://ionicframework.com/docs/installation/android" rel="external nofollow noopener noreferrer" target="_blank">Android Setup</a></li></ul></li></ul><h2 id="프로젝트-생성하고-띄우기"><a href="#프로젝트-생성하고-띄우기" class="headerlink" title="프로젝트 생성하고 띄우기"></a>프로젝트 생성하고 띄우기</h2><p>설명이 많으면 재미없으니 바로 프로젝트를 생성해보겠습니다. 자세히 알고싶으면 이 링크를 참고하세요. <a href="https://ionicframework.com/docs/installation/cli" rel="external nofollow noopener noreferrer" target="_blank">Installing Ionic</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g ionic </span><br><span class="line">$ sudo npm install -g ionic  <span class="comment"># sudo 권한이 필요한 경우</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tab 기반 어플리케이션</span></span><br><span class="line">$ ionic start myApp tabs</span><br><span class="line"><span class="comment"># .... 뭐 알아서 잘 설치 됨..</span></span><br><span class="line"><span class="comment"># 아래를 물어보는데 저는 필요없어서 n </span></span><br><span class="line">? Install the free Ionic Appflow SDK and connect your app? (Y/n) n </span><br><span class="line"><span class="comment"># ... 뭐 알아서 잘 ..</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> ./myApp</span><br><span class="line">$ ionic serve</span><br><span class="line"></span><br><span class="line">&gt; ng run app:serve --host=0.0.0.0 --port=8100</span><br><span class="line"><span class="comment"># .. 뭐 이것 저것 안내 로그..</span></span><br><span class="line"></span><br><span class="line">[INFO] Development server running!</span><br><span class="line"></span><br><span class="line">       Local: http://localhost:8100</span><br><span class="line">       External: http://xxx.xxx.xxx.xxx:8100</span><br><span class="line"></span><br><span class="line">       Use Ctrl+C to quit this process</span><br><span class="line"></span><br><span class="line">[INFO] Browser window opened to http://localhost:8100!</span><br><span class="line"></span><br><span class="line"><span class="comment"># .. 뭐 이것저것 뜸..</span></span><br><span class="line">[ng] ℹ ｢wdm｣: Compiled successfully.</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>뭐 이렇게 알아서 이것저것 해주더니 브라우저가 자동으로 열리는데요. 아래처럼 기본 탭 구성의 브라우저가 뜹니다.<br><img src="/2019/05/15/develop/ionic-1/2.png"><br><a href="http://localhost:8100" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8100</a>로 서빙되며 탭뷰가 붙은 앱이 떴습니다.<br>이 처럼 웹으로 빌드 되기 때문에 브라우저로 확인이 가능하고요. 나중에 다루겠지만 <a href="https://ionicframework.com/docs/appflow/devapp" rel="external nofollow noopener noreferrer" target="_blank">Ionic DevApp</a>을 통해 폰에서도 확인이 가능합니다.</p><h2 id="코드-구조-살펴보기"><a href="#코드-구조-살펴보기" class="headerlink" title="코드 구조 살펴보기"></a>코드 구조 살펴보기</h2><img src="/2019/05/15/develop/ionic-1/3.png"><p>대충 이렇게 생겼고요. 저흰 src 밑에서 작업하면 됩니다.<br>디렉토리에서 대충 감이 오겠지만 tabs가 tab1, tab2, tab3을 라우팅 해주는 구조입니다.<br>그래도 궁금하니 tabs/tabs.router.module.ts를 열어보겠습니다.</p><figure class="highlight typescript"><figcaption><span>tabs.router.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouterModule, Routes &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TabsPage &#125; <span class="keyword">from</span> <span class="string">'./tabs.page'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'tabs'</span>,</span><br><span class="line">    component: TabsPage,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'tab1'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            path: <span class="string">''</span>,</span><br><span class="line">            loadChildren: <span class="string">'../tab1/tab1.module#Tab1PageModule'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'tab2'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            path: <span class="string">''</span>,</span><br><span class="line">            loadChildren: <span class="string">'../tab2/tab2.module#Tab2PageModule'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'tab3'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            path: <span class="string">''</span>,</span><br><span class="line">            loadChildren: <span class="string">'../tab3/tab3.module#Tab3PageModule'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">''</span>,</span><br><span class="line">        redirectTo: <span class="string">'/tabs/tab1'</span>,</span><br><span class="line">        pathMatch: <span class="string">'full'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    redirectTo: <span class="string">'/tabs/tab1'</span>,</span><br><span class="line">    pathMatch: <span class="string">'full'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    RouterModule.forChild(routes)</span><br><span class="line">  ],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TabsPageRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>보시다시피 뭐 특별한게 있는건 아니고요. angular routing 형태로 만들면 됩니다.</p><figure class="highlight html"><figcaption><span>tabs.page.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-tabs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-tab-bar</span> <span class="attr">slot</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-tab-button</span> <span class="attr">tab</span>=<span class="string">"tab1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"flash"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>Tab One<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-tab-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-tab-button</span> <span class="attr">tab</span>=<span class="string">"tab2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"apps"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>Tab Two<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-tab-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-tab-button</span> <span class="attr">tab</span>=<span class="string">"tab3"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"send"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>Tab Three<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-tab-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-tab-bar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure><p>뷰에서는 ionic이 제공되는 디렉티브를 이용하면 됩니다. 탭의 경우 위와같이 만들어져 있네요.<br>뭐 꼭 위처럼 안만들어도 되지만 예시가 이렇게 나와있으니 이 형식을 따르면 좋을것 같습니다.</p><h2 id="각-플랫폼에서-실행하기"><a href="#각-플랫폼에서-실행하기" class="headerlink" title="각 플랫폼에서 실행하기"></a>각 플랫폼에서 실행하기</h2><p>이 링크에서 자세히 설명되어 있습니다만 <a href="https://ionicframework.com/docs/building/ios" rel="external nofollow noopener noreferrer" target="_blank">Running on iOS</a>, <a href="https://ionicframework.com/docs/building/android" rel="external nofollow noopener noreferrer" target="_blank">Running on Android</a> 아주 간단하게 적겠습니다.</p><ul><li>iOS<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ionic cordova prepare ios</span><br><span class="line">$ ionic cordova run ios -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># ios-deploy 설치하라는 에러가 나면 아래를 실행하자</span></span><br><span class="line">$ sudo npm install -g ios-deploy</span><br><span class="line">$ sudo npm install -g ios-deploy --unsafe-perm=<span class="literal">true</span> <span class="comment"># 엘캐피탄 이상에서는 이렇게</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cordova telemetry on 이거 하라고 하면 해주자</span></span><br><span class="line">$ cordova telemetry on</span><br></pre></td></tr></table></figure></li></ul><ul><li>Android<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ionic cordova prepare android</span><br><span class="line">$ ionic cordova run android -l</span><br></pre></td></tr></table></figure></li></ul><h2 id="Ionic-DevApp-이용하기"><a href="#Ionic-DevApp-이용하기" class="headerlink" title="Ionic DevApp 이용하기"></a>Ionic DevApp 이용하기</h2><p>번거로운 과정 없이 폰에서도 확인이 가능한데요. <a href="https://ionicframework.com/docs/appflow/devapp" rel="external nofollow noopener noreferrer" target="_blank">Ionic DevApp</a>을 참고하여 폰에 앱을 설치합니다.<br>폰과 컴퓨터가 같은 네트워크에 있어야 확인 가능합니다.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ionic serve</span><br><span class="line">[INFO] Development server running!</span><br><span class="line">       Local: http://localhost:8100</span><br><span class="line">       External: http://192.168.0.2:8100</span><br><span class="line">       </span><br><span class="line">       Use Ctrl+C to quit this process</span><br></pre></td></tr></table></figure></p><p>왼쪽 메뉴를 열고 <code>Enter address manually</code>를 선택한 후 위 실행 로그의 External 부분을 참고하여 ip, port를 잘 입력하면 되겠습니다. </p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>초기 세팅에 대해서만 알아보았습니다. 자세한것들은 공식 문서를 참고하면 됩니다. <a href="https://ionicframework.com/docs/" rel="external nofollow noopener noreferrer" target="_blank">Ionic Framework</a><br>근데 공식 문서에 항목들은 잘 정리된거 같은데 예시는 좀 부족한것 같네요. 그런데 iOS와 Android에서 보여주는 look의 차이까지 잘 보여주는 점은 장점입니다.<br>시간날 때마다 간단한 앱을 만들 수 있는 공부를 할 계획인데요. 아는게 생길때마다 포스팅 해보도록 하겠습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/05/15/develop/ionic-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>저의 다른 글 매체를 소개합니다.</title>
      <link>https://mingpd.github.io/2019/05/05/anything/20190505-112100/</link>
      <guid>https://mingpd.github.io/2019/05/05/anything/20190505-112100/</guid>
      <pubDate>Sun, 05 May 2019 02:21:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;티스토리 &lt;a href=&quot;https://cfdf.tistory.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://cfdf.tistory.com&lt;/a&gt;&lt;br&gt;브런치 &lt;a href=&quot;https://brunch.co.kr/@mingus&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://brunch.co.kr/@mingus&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><p>Github은 개발 블로그로만 사용중입니다.</p><p>개발이 아닌 가벼운 글들은 다른 매체로도 송고 중이니 궁금하신분들은 아래를 참고해주세요.<br>티스토리 <a href="https://cfdf.tistory.com" rel="external nofollow noopener noreferrer" target="_blank">https://cfdf.tistory.com</a><br>브런치 <a href="https://brunch.co.kr/@mingus" rel="external nofollow noopener noreferrer" target="_blank">https://brunch.co.kr/@mingus</a></p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/05/05/anything/20190505-112100/#disqus_thread</comments>
    </item>
    
    <item>
      <title>기술면접에 나올법한 질문들 1</title>
      <link>https://mingpd.github.io/2019/04/22/interview/interview-1/</link>
      <guid>https://mingpd.github.io/2019/04/22/interview/interview-1/</guid>
      <pubDate>Mon, 22 Apr 2019 02:30:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;면접 때 나올 법한 소소한 질문들 생각해봅시다.&lt;br&gt;꼭 면접 목적이 아니라도 알아두면 좋은 내용들입니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><h3 id="java-synchronized-키워드의-의미는-무엇인가요"><a href="#java-synchronized-키워드의-의미는-무엇인가요" class="headerlink" title="java, synchronized 키워드의 의미는 무엇인가요?"></a>java, synchronized 키워드의 의미는 무엇인가요?</h3><p>둘 이상의 쓰레드가 공동의 자원을 공유할 때, 한 쓰레드가 그 자원을 수정하는데 다른 쓰레드가 동시에 수정하면 문제가 발생할 수 있습니다.<br>이 때 사용하는 것이 synchronized 키워드이며 method 혹은 블럭에 사용 가능합니다.<br>synchronized는 method 와 블럭을 통해 설정 가능하며 해당 구역에 쓰레드 접근시 락을 획득하여 구간을 빠져 나올때 까지 다른 쓰레드 접근을 막는 매커니즘입니다.<br><a href="https://tourspace.tistory.com/54" rel="external nofollow noopener noreferrer" target="_blank">Java의 동기화 -Synchronized 키워드의 사용</a> 참고</p><h3 id="java-ConcurrentHashMap과-HashTable-의-차이는-무엇인가요"><a href="#java-ConcurrentHashMap과-HashTable-의-차이는-무엇인가요" class="headerlink" title="java, ConcurrentHashMap과 HashTable 의 차이는 무엇인가요?"></a>java, ConcurrentHashMap과 HashTable 의 차이는 무엇인가요?</h3><p>HashTable은 동기화를 위해 synchronized 키워드를 이용해서 메소드 전체에 락을 걸고,<br>ConcurrentHashMap 에서는 내부적으로 여러 개의 <code>세그먼트</code>를 두고 각 <code>세그먼트</code>마다 별도의 락을 가지고 있습니다.<br>이로 인하여 ConcurrentHashMap 의 성능이 월등히 좋습니다.</p><h3 id="java-Integer와-Atomic-lt-Integer-의-차이는-무엇인가요"><a href="#java-Integer와-Atomic-lt-Integer-의-차이는-무엇인가요" class="headerlink" title="java, Integer와 Atomic&lt;Integer>의 차이는 무엇인가요?"></a>java, Integer와 Atomic&lt;Integer>의 차이는 무엇인가요?</h3><p>Atomic 자료형은 synchronized 키워드가 없이도 Thread-safe 함을 보장합니다.<br>이 데이터 타입은 compare &amp; swap (<code>CAS</code>) 연산을 직접 이용하는데요.<br>간단히 설명하자면, 값을 변경할 때 자신이 읽었던 변수의 값을 기억하고있다가 변경 직전에 변수의 메모리 내의 값을 확인하여 이전에 기억해놓은 값과 같은 경우에만 처리하고 그렇지 않은경우는 무산시키는 방법입니다.<br>CPU 차원에서 하드웨적으로 지원하는 연산이기 때문에 굉장히 빠릅니다. 따라서 병렬적으로 사용될 변수에는 Atomic 자료형을 사용하는게 좋습니다.</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="java-Generic이란-무엇이며-사용-시-어떤-이점이-있나요"><a href="#java-Generic이란-무엇이며-사용-시-어떤-이점이-있나요" class="headerlink" title="java, Generic이란 무엇이며 사용 시 어떤 이점이 있나요?"></a>java, Generic이란 무엇이며 사용 시 어떤 이점이 있나요?</h3><p>클래스의 타입을 파라미터로 만든 것 입니다. Java 1.5부터 추가되었으며 &lt;TYPE> 문법을 이용합니다.<br>이는 컴파일 타임에 구체적인 타입이 결정되도록 함으로써 <code>runtime exception을 예방</code>할 수 있습니다.<br>또 객체를 꺼내 사용할 시 형변환을 통한 타입을 맞출 필요가 없어 코드를 간결하게 줄일 수 있습니다.</p><h3 id="java-변수의-3가지-타입에-대해-설명해주세요"><a href="#java-변수의-3가지-타입에-대해-설명해주세요" class="headerlink" title="java, 변수의 3가지 타입에 대해 설명해주세요."></a>java, 변수의 3가지 타입에 대해 설명해주세요.</h3><p>클래스 변수(static variable), 인스턴스 변수(instance variable), 지역 변수(local variable)가 있습니다.<br>클래스 변수는 클래스의 모든 인스턴스에서 공유하는 변수로서 클래스가 메모리에 올라갈 때 static 영역에 생성됩니다.<br>인스턴스 변수는 인스턴스가 new 키워드로 생성될 때 생성됩니다. heap 영역에 생성되며 Garbage collector가 내부 알고리즘에 의해 주기적으로 해제해줍니다.<br>지역 변수는 메서드 안에서 선언되고 메서드가 종료되면 소멸하여 사용할 수 없습니다. stack 영역에 저장됩니다.</p><h3 id="jpa-Transactional-사용시-전파-propergation-속성-7가지는-무엇인가요"><a href="#jpa-Transactional-사용시-전파-propergation-속성-7가지는-무엇인가요" class="headerlink" title="jpa, @Transactional 사용시 전파(propergation) 속성 7가지는 무엇인가요?"></a>jpa, @Transactional 사용시 전파(propergation) 속성 7가지는 무엇인가요?</h3><ol><li>REQUIRED : 부모 트랜잭션 내에서 실행하며 부모 트랜잭션이 없을 경우 새로운 트랜잭션을 생성</li><li>REQUIRES_NEW : 부모 트랜잭션을 무시하고 무조건 새로운 트랜잭션이 생성</li><li>SUPPORT : 부모 트랜잭션 내에서 실행하며 부모 트랜잭션이 없을 경우 nontransactionally로 실행</li><li>MANDATORY : 부모 트랜잭션 내에서 실행되며 부모 트랜잭션이 없을 경우 예외가 발생</li><li>NOT_SUPPORT : nontransactionally로 실행하며 부모 트랜잭션 내에서 실행될 경우 일시 정지</li><li>NEVER : nontransactionally로 실행되며 부모 트랜잭션이 존재한다면 예외가 발생</li><li>NESTED : 해당 메서드가 부모 트랜잭션에서 진행될 경우 별개로 커밋되거나 롤백될 수 있음. 둘러싼 트랜잭션이 없을 경우 REQUIRED와 동일하게 작동</li></ol><p>여기서 주로 1, 2번 정도만 주로 사용되므로 두가지만 알아도 무난할듯 합니다.</p><h3 id="jpa-OSIV란-무엇인가요"><a href="#jpa-OSIV란-무엇인가요" class="headerlink" title="jpa, OSIV란 무엇인가요?"></a>jpa, OSIV란 무엇인가요?</h3><p>Open Session In View 의 줄임말로서 JPA 영속성 컨텍스트를 뷰 렌더링 시점까지 오픈된 채로유지하는 패턴을 의미합니다.<br>뷰 렌더링 시점에 lazy 로딩이 필요한 객체의 경우 트랜젝션이 종료되어 LazyInitializationException이 발생하는 경우가 있는데요.<br>이를 방지하고자 영속성 컨텍스트만 뷰 시점까지 유지하는 것 입니다.<br>트랜잭션을 뷰 렌더링 시점까지 유지하는 방법도 있지만 이는 JDBC 커넥션의 점유 시간이 길어지는 단점이 있습니다. OSIV의 경우 하이버네이트 세션만 오픈할 뿐 트랜잭션은 시작하지 않도록 하여 이 단점을 해결하였습니다.<br>이것 관련하여, 뷰 렌더링 시점에 엔티티의 값을 수정해도 flush 되지 않아 반영이 되지 않습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/04/22/interview/interview-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>kotlin to javascript (client side)</title>
      <link>https://mingpd.github.io/2019/04/18/newtech/kotlin-to-javascript/</link>
      <guid>https://mingpd.github.io/2019/04/18/newtech/kotlin-to-javascript/</guid>
      <pubDate>Thu, 18 Apr 2019 05:27:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;kotlin으로 작성된 코드를 javascript로 바꾸는 방법을 알아봅니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --><br>kotlin으로 작성된 코드를 javascript로 바꾸는 방법을 알아봅니다.<br>작업실 카테고리에 <a href="/2019/04/18/workroom/spammaker/" title="스팸체 생성기">스팸체 생성기</a>를 올려두었는데요.<br>원래 kotlin 기반의 Spring boot로 짜여진 코드였습니다. 그런데 spring boot를 돌리던 heroku 무료 사용 가능 기간(1000시간)이 도래하여 서버가 내려갈 위기에 처했습니다.<br>별건 아니지만 재밌는 작품이어서 버리긴 좀 아깝고.. js로 포팅해서 이 블로그에 넣을 생각을 하던 찰나에 이런 문서를 발견했습니다.</p><h2 id="Kotlin-to-JavaScript"><a href="#Kotlin-to-JavaScript" class="headerlink" title="Kotlin to JavaScript"></a>Kotlin to JavaScript</h2><p><a href="https://kotlinlang.org/docs/tutorials/javascript/kotlin-to-javascript/kotlin-to-javascript.html" rel="external nofollow noopener noreferrer" target="_blank">Kotlin to JavaScript</a> 문서를 보니 대충 감이 오는데요.<br>kotlin에서 공식적으로 javascript로 빌드하는 기능을 제공한다고 합니다.<br>web browser에서 돌릴 수 있는 형태(client side)와 nodejs 등 에서 돌릴 수 있는 형태도(server side) 지원합니다. 저의경우 GitHub 블로그에서 돌릴것이므로 client side 형태로 빌드해보겠습니다.</p><p>문서에 의하면 방법은 세가지입니다. </p><ul><li>gradle을 이용</li><li>maven을 이용</li><li>그냥 intellij만 이용</li></ul><p>저의 경우 간단하게 끝내고 싶어서 intellij에서 바로 빌드하는 방법을 사용했습니다.<br>하지만 실 서비스에서 제대로 관리하신다면 gradle 혹은 maven 프로젝트 설정을 추천합니다.</p><h2 id="개발-방법"><a href="#개발-방법" class="headerlink" title="개발 방법"></a>개발 방법</h2><p>프로젝트를 만들건데요. Kotlin을 선택합니다. 그리고 오른쪽에서 <code>JS | IDEA</code>를 선택합니다.<br><img src="/2019/04/18/newtech/kotlin-to-javascript/1.png"></p><p>여긴 이름만 잘 지어서 Finish 합니다.<br><img src="/2019/04/18/newtech/kotlin-to-javascript/2.png"></p><p>그 후 <code>src</code> 하위에 kotlin 코드를 넣습니다. 꼭 main이 있어야 할 필요는 없습니다.<br>참고로 다른 프로젝트에서 kotlin 코드를 가져온 경우 빨간줄이 많을 수 있으니 다시 체크해봐야합니다.<br>package 구조가 다르다보니 이 부분에서 꼬이는 경우가 많더군요.<br>저의경우 아래와 같은 프로젝트 구조가 되었습니다.<br><img src="/2019/04/18/newtech/kotlin-to-javascript/3.png" style="width: 400px"></p><p>간단히 Main.kt와 index.html만 살펴보겠습니다.</p><figure class="highlight kotlin"><figcaption><span>Main.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> spamServices = listOf(SymbolizationService(), HangleService())</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsName(<span class="meta-string">"toSpam"</span>)</span>   <span class="comment">// 중요</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">toSpam</span><span class="params">(input: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">var</span> output = input</span><br><span class="line">    spamServices.forEach &#123;</span><br><span class="line">        output = it.process(output)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 후략</span></span><br></pre></td></tr></table></figure><p>스팸체 생성기의 진입 포인트입니다.<br>그냥 똑같이 kotlin 코드를 작성하면 되는데요. <code>@JsName</code> 어노테이션이 중요합니다.<br>이는 javascript로 빌드 되었을 때 function의 이름을 지정하는 역할을 합니다.<br>저 어노테이션이 없으면 kotlin 코드의 <code>함수이름_임의문자</code> 형태로 function이 만들어집니다.<br>위 예시에서 어노테이션이 없을경우 <code>toSpam_2DFg3h</code> 뭐 이런식으로 만들어지는 것이죠.<br>따라서 html에서 직접 호출하여 사용할 함수의 경우는 반드시 이름을 지정해주도록 합니다.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 반드시 import 하자 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"out/production/spammaker/lib/kotlin.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"out/production/spammaker/spammaker.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(spammaker.toSpam(<span class="string">"동해물과 백두산이 마르고 닳도록 하느님이 보우하사 우리나라 만세"</span>))</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>다음은 index.html의 내용입니다. <code>lib/kotlin.js</code>는 그냥 무조건 import 한다고 생각하시면 됩니다.<br>두번째 script는 kotlin으로 작성된 코드를 javascript로 빌드했을 때 만들어지는 코드입니다.<br>기본적으로 프로젝트 <code>모듈명의 카멜케이스</code>로 만들어지기 때문에 모듈명에 특수문자가 들어간다면 수정을 하는게 좋겠습니다.<br>그리고 모듈명으로 객체가 만들어지기 때문에 저의 경우 <code>spammaker.toSpam(...)</code> 처럼 호출했습니다.<br>눈치채셨겠지만 위에서 설명한 <code>@JsName</code>이 바로 함수 이름이 됩니다.<br>내용이 궁금하신 분들은 <code>모듈명.js</code>를 직접 열어보시기 바랍니다.</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="실행-방법"><a href="#실행-방법" class="headerlink" title="실행 방법"></a>실행 방법</h2><p>이 다음에 뭐 어떡해야하나 난감했는데 아주 쉽더군요. 일단 빌드를 합니다.<br><img src="/2019/04/18/newtech/kotlin-to-javascript/4.png" style="width: 500px"><br><br><br>빌드를 하게 되면 <code>out</code>디렉토리에 이것저것 생깁니다. 저의경우 아래처럼 생겼습니다.<br><img src="/2019/04/18/newtech/kotlin-to-javascript/5.png" style="width: 300px"><br><br><br>그 후 실행을 하면되는데요. 방법은 아주 쉽습니다.<br>아래처럼 index.html에서 팝업메뉴를 띄워서 바로 실행할 수 있습니다.<br><img src="/2019/04/18/newtech/kotlin-to-javascript/6.png" style="width: 500px"><br>그러면 브라우저창이 나타나면서 바로 실행할 수 있습니다.<br>정말 좋은점은 바로 Debug 모드인데요. 이를 실행하면 browser 콘솔창의 내용이 intellij 콘솔창에서 나타나게 됩니다. 브레이크 포인트도 잘 먹습니다.</p><h2 id="갖다-쓰기"><a href="#갖다-쓰기" class="headerlink" title="갖다 쓰기"></a>갖다 쓰기</h2><p>만들어진 out 디렉토리 하위에 있는 파일들을 복사해다가 원하는곳에 붙여넣어 사용하면 됩니다.<br>중요한 점은 위의 예시처럼 <code>두 가지 파일을 모두 import</code>해야 한다는 점입니다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>사용하실 분들은 공식 문서를 잘 살펴보시길 권장해드립니다.<br>공식문서가 좀 부실하게 설명이 되있긴 하지만 도움은 됩니다. 그리고 아직 이걸 많이 안사용하는 것 같습니다. 검색해도 결과가 별로 없네요.<br>저의경우 가벼운 예제를 들었지만 kotlin 코드 상에서 DOM을 직접 조작할 수 있는 API도 있습니다.<br>필요하신 분들은 한번 파보시길 추천드립니다. </p><p>kotlin은 정말 여러 분야에서 사용하기로 작정하고 나온 언어인것 같습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/04/18/newtech/kotlin-to-javascript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>스팸체 생성기</title>
      <link>https://mingpd.github.io/2019/04/18/workroom/spammaker/</link>
      <guid>https://mingpd.github.io/2019/04/18/workroom/spammaker/</guid>
      <pubDate>Thu, 18 Apr 2019 05:00:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;亼팸ㅊㅔ를❥만✪틂♜ㅇㅓ✢봅ㅅ1ㄷr♘&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><iframe src="spammaker.html" width="100%" height="550px" frameborder="0" allowfullscreen></iframe><br><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>스팸체를 만들 수 있습니다.<br>→ <span style="font-family: NanumGothic;">亼✣팸ღㅊㅔ✽를✚만✬들✏㐃✺있✪습L1딻.✮</span></p><p>혹은 한국인만 읽을 수 있는 글을 만들 수 있습니다.<br>→ <span style="font-family: NanumGothic;">혺은 한국읹많 읽읊 수 있늕 글읊 많들 쑮 있습니땂. </span></p><p>부디 재미로만 이용해주세요.<br><blockquote><p>만든 글귀의 사용에 따른 책임은 개발자가 지지 않습니다.</p></blockquote></p><h2 id="히스토리"><a href="#히스토리" class="headerlink" title="히스토리"></a>히스토리</h2><p>heroku 무료서버에 kotlin spring boot 기반으로 돌리다가 무료 서버 기간이 거의 다 되어 고민하던 중<br>kotlin 코드를 javascript로 빌드 할 수 있다는 훌륭한 사실을 알고나서 js로 포팅한 스팸체 생성기입니다.<br>궁금하신 분들은 <a href="/2019/04/18/newtech/kotlin-to-javascript/" title="kotlin to javascript (client side)">kotlin to javascript (client side)</a>를 참고해주세요.</p><h2 id="Android-App"><a href="#Android-App" class="headerlink" title="Android App"></a>Android App</h2><p>웹 접속이 귀찮으신 분들은 이용해주세요.<br><a href="https://play.google.com/store/apps/details?id=com.mgstudio.spammaker" rel="external nofollow noopener noreferrer" target="_blank">스팸만들기 - Google Play</a></p><p>참고로 <code>iOS 앱은 돈이 없어서 못만들었습니다.</code></p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/04/18/workroom/spammaker/#disqus_thread</comments>
    </item>
    
    <item>
      <title>GitHub 블로그를 만들어보았습니다.</title>
      <link>https://mingpd.github.io/2019/04/16/anything/20190416-132137/</link>
      <guid>https://mingpd.github.io/2019/04/16/anything/20190416-132137/</guid>
      <pubDate>Tue, 16 Apr 2019 04:21:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;Hexo 기반 블로그를 만들어보았습니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br>Hexo 기반 블로그를 만들어보았습니다.<br><code>github.io</code>를 너무 갖고싶어서 만들어보았습니다.<br>부족한 설명이지만 나름 정리를 해두었으니 필요하신분들은 참고해주세요.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/04/16/anything/20190416-132137/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Github 블로그 만들기 with Hexo - 카테고리 보기 커스터마이징</title>
      <link>https://mingpd.github.io/2019/04/16/github-blog-with-hexo-5/</link>
      <guid>https://mingpd.github.io/2019/04/16/github-blog-with-hexo-5/</guid>
      <pubDate>Tue, 16 Apr 2019 00:54:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;최하위 카테고리에서만 글 목록 보이기&lt;br&gt;카테고리를 사이드바로 빼기&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --><br>all-categories에서 leaf 카테고리 일때만 글 목록을 보여주고 싶은데요.<br>왠지 그런 옵션은 없는것 같아서 ejs 템플릿을 건드려보도록 하겠습니다.</p><img src="/2019/04/16/github-blog-with-hexo-5/before.png"><p>이와같이 “개발”에 하위 카테고리들의 포스트가 중복되어 나오는게 맘에안듭니다.</p><h2 id="최하위-카테고리에서만-글-목록-보이기"><a href="#최하위-카테고리에서만-글-목록-보이기" class="headerlink" title="최하위 카테고리에서만 글 목록 보이기"></a>최하위 카테고리에서만 글 목록 보이기</h2><p><code>themes/tranquilpeak/layout/all-categories.ejs</code> 를 열어봅시다.<br><figure class="highlight javascript"><figcaption><span>all-categories.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayCategoriesAndPosts</span>(<span class="params">category</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// get its posts</span></span><br><span class="line">    <span class="keyword">var</span> posts = category.posts;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// create html for its posts</span></span><br><span class="line">    posts.sort(<span class="string">'date'</span>, <span class="string">'desc'</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/********** 이 부분을 추가합시다. ***********/</span></span><br><span class="line">        <span class="keyword">if</span> (childCategories.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/********** 여기까지요. *******************/</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        html += <span class="string">'&lt;li class="archive-post"&gt;'</span>;</span><br><span class="line">        html += <span class="string">'&lt;a class="archive-post-title" href="'</span> + url_for(post.path) + <span class="string">'"&gt;'</span>;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>저 if 문이 핵심입니다. 의미를 잘 곱씹어보면 왜그런지 이해가 되실거에요.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">단, 모든 글이 전부 최하위 카테고리에 있을때만 제대로 나타납니다. 예를들어</span><br><span class="line">&quot;개발 &gt; 소소한 팁&quot;   </span><br><span class="line">이렇게 2개 구조의 카테고리에</span><br><span class="line"></span><br><span class="line">&quot;개발&quot;            </span><br><span class="line">만 달린 글을 쓰면 목록에서 안보입니다.</span><br></pre></td></tr></table></figure><p><br></p><img src="/2019/04/16/github-blog-with-hexo-5/after.png"><p>위 처럼 중간 카테고리에서는 글목록이 나타나지 않습니다.</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="카테고리를-사이드바로-빼기"><a href="#카테고리를-사이드바로-빼기" class="headerlink" title="카테고리를 사이드바로 빼기"></a>카테고리를 사이드바로 빼기</h2><p>위와는 상관이 없습니다만 문득 최상위 카테고리를 사이드바로 빼고 all-categories를 없애면 어떨까 하는 생각이 들었습니다. 그래서 약간의 개발을 해봤습니다. 위에 수정한 코드를 이용해도 되고 안해도 됩니다.</p><p><code>themes/tranquilpeak/layout/category-by-name.ejs</code> 파일을 생성하고<br><code>all-categories.ejs</code>의 내용을 붙여넣습니다.<br>그리고는 아래를 참고하여 수정합니다.</p><figure class="highlight html"><figcaption><span>category-by-name.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 윗부분은 생략합니다. 대충 아래랑 비슷한 부분부터 시작해주세요. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">currentCategory</span> =  <span class="string">url_for(path).split(</span>'/')[<span class="attr">1</span>]<span class="attr">.replace</span>("<span class="attr">category-</span>", "") %&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- categories-archives 위에 이 코드를 붙여넣읍시다. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"categories-archives"</span> <span class="attr">class</span>=<span class="string">"main-content-wrap"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 검색 기능 안쓸거라서 삭제했는데 넣으시려면 넣으세요 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"archive-result text-color-base text-xlarge"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-message-zero</span>=<span class="string">"&lt;%= __('global.categories_found.zero') %&gt;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-message-one</span>=<span class="string">"&lt;%= __('global.categories_found.one') %&gt;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-message-other</span>=<span class="string">"&lt;%= __('global.categories_found.other') %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            원래 site.categories.sort('name') 이라고 되어있는 부분을</span></span><br><span class="line"><span class="comment">            아래처럼 site.categories.find(&#123;'name': currentCategory&#125;) 로 변경해줍니다.</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"boxes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">site.categories.find</span>(&#123;'<span class="attr">name</span>'<span class="attr">:</span> <span class="attr">currentCategory</span>&#125;)<span class="attr">.sort</span>('<span class="attr">name</span>')<span class="attr">.each</span>(<span class="attr">function</span>(<span class="attr">category</span>) &#123; %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">category.parent</span>) &#123; %&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">%-</span> <span class="attr">displayCategories</span>(<span class="attr">category</span>) %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"boxes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">site.categories.find</span>(&#123;'<span class="attr">name</span>'<span class="attr">:</span> <span class="attr">currentCategory</span>&#125;)<span class="attr">.sort</span>('<span class="attr">name</span>')<span class="attr">.each</span>(<span class="attr">function</span>(<span class="attr">category</span>) &#123; %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">category.parent</span>) &#123; %&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">displayCategoriesAndPosts</span>(<span class="attr">category</span>) %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>저는 사이드바에 꺼낸 카테고리의 링크를 <code>category-카테고리명</code>으로 설정하려고 하는데요.<br>각 글 페이지에서 <code>url_for(path)</code> 를 호출하면 <code>/category-카테고리명/index.html</code> 이 됩니다.</p><p><code>var currentCategory =  url_for(path).split(&#39;/&#39;)[1].replace(&quot;category-&quot;, &quot;&quot;)</code> 에서는<br>따라서 currentCategory 에는 <code>카테고리명</code> 만 남게됩니다.</p><p>이 값을 <code>site.categories.find({&#39;name&#39;: currentCategory})</code> 처럼 넣어 호출하면 찾아집니다. </p><p>그 후 프로젝트의 <code>source</code> 디렉토리에 page 디렉토리를 생성하면 되는데요.<br><code>category-카테고리명</code> 형식으로 만들면 되겠습니다.<br>그 안에 <code>ìndex.md</code>를 생성하고 아래처럼 코드를 넣습니다.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: "카테고리명"    </span><br><span class="line">layout: "category-by-name"  # 위에서 생성한 ejs 파일명입니다.</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>그 후 <code>themes/tranquilpeak/_config.yml</code>를 열어 메뉴를 편집합니다.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ... 생략</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line"><span class="attr">    menu:</span></span><br><span class="line"><span class="attr">        home:</span></span><br><span class="line"><span class="attr">            title:</span> <span class="string">global.home</span></span><br><span class="line"><span class="attr">            url:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">            icon:</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line"><span class="comment"># 전체 카테고리 안쓸거라 주석처리했습니다. 쓸거면 풀어주세요.            </span></span><br><span class="line"><span class="comment">#        categories:</span></span><br><span class="line"><span class="comment">#            title: global.categories</span></span><br><span class="line"><span class="comment">#            url: /all-categories</span></span><br><span class="line"><span class="comment">#            icon: fa fa-bookmark</span></span><br><span class="line"><span class="attr">        category-name:</span>              <span class="comment"># key 이름은 아무거나 써도 되나봅니다.</span></span><br><span class="line"><span class="attr">            title:</span> <span class="string">카테고리명</span>          <span class="comment"># 메뉴에 표시될 이름을 써주세요. 아니면 en.yml 등의 key를 명시해주세요.</span></span><br><span class="line"><span class="attr">            url:</span> <span class="string">/category-카테고리명</span>  <span class="comment"># "category-카테고리명" 형태로 써주세요. 그래야 ejs에서 파싱합니다. </span></span><br><span class="line"><span class="attr">            icon:</span> <span class="string">fa</span> <span class="string">fa-calendar</span>    <span class="comment"># 아이콘도 맘에드는걸로 ..</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 후략 ...          </span></span><br></pre></td></tr></table></figure></p><p>이처럼 수정하고 재시작하면 카테고리가 사이드바로 빠져나와 있을것입니다.<br>메뉴에 표시되는 아이콘을 변경하고 싶으시면 <code>fontawesome</code>에서 찾은 클래스명을 <code>icon</code>에 넣어주면 되는데요. <a href="https://fontawesome.com/icons" rel="external nofollow noopener noreferrer" target="_blank">Font Awesome</a>에서 쉽게 찾을 수 있습니다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>아직 부작용은 찾지 못했습니다만 무슨일이 생길진 좀 더 두고봐야겠습니다.<br>혹시 더 좋은 방법 아는분 계시면 알려주세요.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/04/16/github-blog-with-hexo-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Github 블로그 만들기 with Hexo - related posts</title>
      <link>https://mingpd.github.io/2019/04/15/github-blog-with-hexo-4/</link>
      <guid>https://mingpd.github.io/2019/04/15/github-blog-with-hexo-4/</guid>
      <pubDate>Mon, 15 Apr 2019 10:41:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;Tranquilpeak는 hexo-related-popular-posts 지원을 안하는데요.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><h2 id="hexo-related-popular-posts"><a href="#hexo-related-popular-posts" class="headerlink" title="hexo-related-popular-posts"></a>hexo-related-popular-posts</h2><p>관련 글을 표시하기 위한 <a href="https://www.npmjs.com/package/hexo-related-popular-posts" rel="external nofollow noopener noreferrer" target="_blank">hexo-related-popular-posts</a>가 있는데요.<br>단순히 태그 기반으로 관련 글을 보여주거나, Google Analytics를 연동해서 인기글, 방문자 카운터 등의 고급 기능도 지원합니다.<br>저는 가장 기본 기능인 태그 기반 관련글 기능만 사용하려고 합니다.<br>그러나 제가 이래저래 살펴봤지만 Tranquilpeak 테마가 이 라이브러리를 지원하지 않습니다.<br>그래서 <code>야매로</code> 커스터마이징을 해보았습니다.</p><p>위 문서를 참고하여 아래와 같이 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure> <h2 id="야매-커스터마이징"><a href="#야매-커스터마이징" class="headerlink" title="야매 커스터마이징"></a>야매 커스터마이징</h2><p><code>themes/tranquilpeak/source/_css/components</code> 이 디렉토리에서 새 파일을 생성할건데요.<br>저의 경우 <code>_popular.scss</code>로 지었습니다.</p><figure class="highlight scss"><figcaption><span>_popular.scss</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.popular-posts</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>-inline-start: <span class="number">3px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.popular-posts-item</span> &#123;</span><br><span class="line">        <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">        <span class="attribute">word-wrap</span>: normal;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">            </span><br><span class="line">        <span class="selector-class">.popular-posts-title</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: inline;</span><br><span class="line">            <span class="selector-tag">h3</span> &#123;</span><br><span class="line">                <span class="attribute">display</span>: inline;</span><br><span class="line">                <span class="selector-tag">a</span> &#123;</span><br><span class="line">                    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">                    <span class="attribute">color</span>: <span class="variable">$font-color-base</span>;</span><br><span class="line">                    <span class="attribute">font</span>: &#123;</span><br><span class="line">                        weight: <span class="number">300</span>;</span><br><span class="line">                        size: map-get(<span class="variable">$font-size</span>, base);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &amp;:hover &#123;</span><br><span class="line">                <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Change style of the list by adding font-awesome icon</span></span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">            <span class="attribute">font-family</span>: <span class="string">'Font Awesome 5 Free'</span>;</span><br><span class="line">            <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">            <span class="attribute">content</span>:     <span class="string">'\f0da'</span>;</span><br><span class="line">            <span class="attribute">font-size</span>:   map-get(<span class="variable">$font-size</span>, small);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p><code>_archive.scss</code>를 참고해서 만들었습니다. Tranquilpeak 테마에서 지원을 안하는 관계로 css를 좀 억지로 만들 수 밖에 없었습니다.</p><p>다음은 <code>themes/tranquilpeak/source/_css/tranquilpeak.scss</code>을 엽니다.<br><figure class="highlight scss"><figcaption><span>tranquilpeak.scss</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span></span><br><span class="line">    <span class="string">'components/alert'</span>,</span><br><span class="line">    <span class="string">'components/archive'</span>,</span><br><span class="line">    //...</span><br><span class="line">    //...</span><br><span class="line">    <span class="string">'components/popular'</span>;  <span class="comment">// 위에서 생성한 것을 추가합니다.</span></span><br></pre></td></tr></table></figure></p><p><code>@import</code> 구문에 방금 생성한 파일을 추가합니다.</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script><p>다음은 <code>themes/tranquilpeak/layout/_partial/post.ejs</code>를 엽니다.<br>위에서 추가한 스타일대로 관련 글 영역을 표시하려고 합니다.</p><figure class="highlight html"><figcaption><span>post.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"post-footer"</span> <span class="attr">class</span>=<span class="string">"post-footer main-content-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> ((<span class="attr">post.tags</span>) &amp;&amp; (<span class="attr">post.tags.length</span> &gt;</span> 0)) &#123; %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-footer-tags"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-color-light text-small"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">post.tagged_in</span>') %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">tag</span>', &#123;<span class="attr">tags:</span> <span class="attr">post.tags</span>&#125;)%&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 커스터마이징 해본 관련 글 영역--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">related</span> = <span class="string">popular_posts(</span> &#123;&#125; , <span class="attr">post</span> ); %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">related</span> &amp;&amp; (<span class="attr">related.length</span> &gt;</span> 0)) &#123; %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-footer-tags"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-color-light text-small"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">post.related</span>') %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%-</span> <span class="attr">related</span> %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 끝 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.actions</span> === <span class="string">undefined</span> || <span class="attr">post.actions</span>) &#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">actions</span>', &#123;<span class="attr">postContent:</span> <span class="attr">postContent</span>&#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.comments</span>) &#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.disqus_shortname</span>) &#123; %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">disqus</span>') %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> <span class="attr">if</span> (<span class="attr">theme.gitment.enable</span>) &#123; %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">gitment</span>') %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>#post-footer</code>를 찾습니다. 그리고 그 아래에 커스터마이징한것을 넣으면 됩니다.<br>물론 다른곳에 두고 싶으신 분들은 그러셔도 됩니다.<br>원래는 <a href="https://github.com/tea3/hexo-related-popular-posts/wiki/More-Settings#customize-html" rel="external nofollow noopener noreferrer" target="_blank">Customize HTML</a>처럼 조작이 가능한것 같은데요.<br>Tranquilpeak 테마에서는 제대로 동작을 안합니다.</p><p><code>themes/tranquilpeak/languages/en.yml</code> 을 열어 <code>post</code> 항목에 다음을 추가합니다.<br>물론 다른 언어팩을 쓰시는 분들은 수정하셔도 됩니다.<br>참고로 저의 경우는 ko.yml을 하나 더 만들어서 한국어로 만들었습니다.</p><figure class="highlight yml"><figcaption><span>en.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post:</span></span><br><span class="line">    <span class="string">no_title</span> <span class="string">:</span> <span class="string">"no title"</span></span><br><span class="line">    <span class="comment"># .....</span></span><br><span class="line">    <span class="comment"># 이렇게 related라고 하나 추가한다</span></span><br><span class="line"><span class="attr">    related:</span> <span class="string">"Related posts"</span></span><br></pre></td></tr></table></figure><p>적용했으면 <code>themes/tranquilpeak</code>에서 아래처럼 빌드합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grunt build</span><br></pre></td></tr></table></figure></p><p>이 후 <code>hexo server</code> 명령으로 결과물을 확인해주세요.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>이 테마가 참 좋아서 고른건데 이것을 지원 안하는점이 매우 가슴이 아픕니다.<br>하지만 커스터마이징이 무궁무진한 프로젝트인것 만큼 야매로 처리해봐야겠습니다.<br>혹시 더 좋은 방법을 아시는 분은 알려주세요.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/04/15/github-blog-with-hexo-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Github 블로그 만들기 with Hexo - 배포 및 기타 설정</title>
      <link>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-3/</link>
      <guid>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-3/</guid>
      <pubDate>Sun, 14 Apr 2019 11:41:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;public 권한의 &lt;code&gt;&amp;lt;자기계정명&amp;gt;.github.io&lt;/code&gt; 을 이름으로 갖는 Repository를 생성합니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><h2 id="Github-Repository-설정"><a href="#Github-Repository-설정" class="headerlink" title="Github Repository 설정"></a>Github Repository 설정</h2><p>Github 계정 생성에 대한 얘기는 생략합니다.<br>중요한 것은 <code>mingpd.github.io</code> 도메인을 사용하고 싶다면 가입 시 반드시 유저명을 <code>mingpd</code>로 해야합니다.</p><p>두 개의 Repository를 준비하면 되겠습니다.</p><ol><li>public 권한의 <code>&lt;자기계정명&gt;.github.io</code> 을 이름으로 갖는 Repository</li><li>블로그 프로젝트를 관리할 Repository</li></ol><p>1번의 경우 Github Page 기능을 사용하기 위해 반드시 저 형식을 갖춰야합니다. 그렇지 않으면 Page 기능이 활성화가 안됩니다.</p><p>왜 두개의 저장소가 필요한지 간략히 설명을 드리겠습니다.<br>포토샵의경우 작업시 사용하는 psd 파일이 있고, 결과물인 png 파일이 있습니다.<br>쉽게말해 1번에는 png 파일을 내보내는것이고, 2번에는 psd 작업 파일을 관리한다고 생각하면 됩니다.</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="Github-Page-배포-설정"><a href="#Github-Page-배포-설정" class="headerlink" title="Github Page 배포 설정"></a>Github Page 배포 설정</h2><p><a href="https://hexo.io/ko/docs/deployment" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a> 이 문서에 설명이 매우 잘 되어있으니 참고해주세요.<br>Repository는 위에서 말한것과 같이 준비되었다고 가정합니다.<br>우선 Github Page 배포를 설정하겠습니다.<br>앞서 라이브러리를 설치해야 합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>_config.yml의 git 부분을 아래와 같이 설정합니다.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/mingpd/mingpd.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span>   <span class="comment"># 혹시 다른 브랜치로 쓰실거면 바꿔주세요</span></span><br></pre></td></tr></table></figure></p><p>이제 아래를 실행해 주면 배포됩니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><h2 id="작업파일-Git-설정"><a href="#작업파일-Git-설정" class="headerlink" title="작업파일 Git 설정"></a>작업파일 Git 설정</h2><p>지금 이것과 별개로 작업 디렉토리에서 작업용 Git 설정을 해주시면 되는데요.<br>아래처럼 하면 되겠습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://github.com/작업용/깃주소.git</span><br><span class="line">...</span><br><span class="line"><span class="comment"># add, push 알아서 해주세요.</span></span><br></pre></td></tr></table></figure></p><p>(git의 pull, add, commit, push 관련 설명은 생략하겠습니다.)<br>참고로 제가 만든 <code>.gitignore</code> 는 아래와 같으니 참고해주세요.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.sass-cache</span><br><span class="line">assets</span><br><span class="line">node_modules</span><br><span class="line">public</span><br><span class="line">.idea</span><br><span class="line">.deploy_git</span><br><span class="line">themes/landscape  # 기본테마인데 삭제 안해서 푸시만 안하게 하려고</span><br><span class="line">db.json</span><br></pre></td></tr></table></figure></p><h2 id="DISQUS"><a href="#DISQUS" class="headerlink" title="DISQUS"></a>DISQUS</h2><p><a href="https://disqus.com" rel="external nofollow noopener noreferrer" target="_blank">DISQUS</a>에 가입합니다.<br>가입 후 <code>I want to isntall Disqus on my site</code>를 선택하여 세팅하면 됩니다.<br><code>https://계정명.disqus.com/admin/settings/general/</code>에 있는 <code>shortname</code>을<br><code>themes/tranquilpeak/_config.yml</code>에 세팅해주면 되겠습니다.</p><p>만약에 로딩이 잘 되지 않는다면 아래 사이트를 참고하여 url 설정을 다시 해 봅시다.<br><a href="https://www.thewordcracker.com/miscellaneous/disqus에서-we-were-unable-to-load-disqus-오류가-발생하는-경우/" rel="external nofollow noopener noreferrer" target="_blank">disqus에서-we-were-unable-to-load-disqus-오류가-발생하는-경우/</a><br>근데 대부분 로딩이 되지 않는 이유는 <code>shortname</code>이 틀려서 일거에요.  </p><p>그리고 DISQUS 언어세팅에 한글이 있었다가 없어졌다고 합니다.<br>그러나 사실 <code>언어선택 select box에서만 없어졌다.</code> 입니다.<br>따라서 dom을 가로채 select box에 넣어주면 되겠습니다.<br>이 링크를 참고해주세요. <a href="https://jungjoongi.com/2018/10/30/disqus-korean-setting/" rel="external nofollow noopener noreferrer" target="_blank">디스커스 Disqus 한글 세팅을 해보자 편법(?)으로</a></p><h2 id="검색엔진-노출-준비"><a href="#검색엔진-노출-준비" class="headerlink" title="검색엔진 노출 준비"></a>검색엔진 노출 준비</h2><p>이것은 정리가 잘 된 글의 링크를 첨부합니다.<br><a href="https://futurecreator.github.io/2016/06/23/search-engine-optimization-hexo-plugins/" rel="external nofollow noopener noreferrer" target="_blank">검색 엔진 최적화(SEO)에 유용한 Hexo 플러그인</a><br><a href="https://iseongho.github.io/posts/hexo-seo/" rel="external nofollow noopener noreferrer" target="_blank">Hexo SEO - 하루 만에 검색 엔진 최적화 시키기</a></p><h2 id="애드센스-설정"><a href="#애드센스-설정" class="headerlink" title="애드센스 설정"></a>애드센스 설정</h2><p><a href="https://futurecreator.github.io/2016/06/16/add-google-adsense-to-hexo/" rel="external nofollow noopener noreferrer" target="_blank">Hexo 블로그에 구글 애드센스(Adsense) 추가하기</a></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>사실 저도 만들어가면서 이 글을 쓰고있습니다.<br>많이 번거로울 줄 알았는데 생각보단 할만한것 같습니다. 그리고 매우 깔끔하고요.<br>조금 더 운영해보고 티스토리에 있는 데이터를 이전해올지 고민을 해봐야겠습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Github 블로그 만들기 with Hexo - 글쓰기</title>
      <link>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-2/</link>
      <guid>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-2/</guid>
      <pubDate>Sun, 14 Apr 2019 11:23:20 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;hexo-cli&lt;/code&gt;가 워낙 잘 되어있기 때문에 간단한 명령어를 통해 글을 만들 수 있습니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><h2 id="Hexo-글쓰기"><a href="#Hexo-글쓰기" class="headerlink" title="Hexo 글쓰기"></a>Hexo 글쓰기</h2><p><code>hexo-cli</code>가 워낙 잘 되어있기 때문에 간단한 명령어를 통해 글을 만들 수 있습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 일반 post는 아래와 같이 만듭니다.</span></span><br><span class="line">$ hexo new post <span class="string">"Github 블로그 만들기 with Hexo - 1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># draft 아래와 같이 만듭니다.</span></span><br><span class="line">$ hexo new draft <span class="string">"Github 블로그 만들기 with Hexo - 2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># draft를 post로 만들때</span></span><br><span class="line">$ hexo publish <span class="string">"Github 블로그 만들기 with Hexo - 2"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>draft란 초안이라는 의미입니다.</p></blockquote><p>참고로 draft를 post로 만들면 상단 front-matter가 초기화되니 꼭 확인을 해야겠습니다.<br>꼭 draft를 사용하지 않아도 브랜치 관리를 잘 해주면 해결될것 같기도 합니다.</p><p>위 둘의 경우는 각각 <code>scaffolds/post.md</code>, <code>scaffolds/draft.md</code>를 템플릿으로 사용합니다.<br>템플릿을 수정하고 싶은경우는 이 두 파일을 수정해두면 되겠습니다.<br>아래는 제가 사용하는 <code>post.md</code> 입니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Github</span> <span class="string">블로그</span> <span class="string">만들기</span> <span class="string">with</span> <span class="string">Hexo</span> <span class="bullet">-</span> <span class="string">글쓰기</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">1555241000000</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[]</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">[]</span></span><br><span class="line"><span class="attr">thumbnail:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">""</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;!--</span> <span class="string">excerpt</span> <span class="bullet">--&gt;</span></span><br><span class="line"><span class="string">&lt;!--</span> <span class="string">toc</span> <span class="bullet">--&gt;</span></span><br></pre></td></tr></table></figure><p>다른 항목들은 보시면 바로 이해가 가실테니 <code>permalink</code>만 간단히 설명하겠습니다.<br>각 글의 주소는 <code>http://호스트명/2019/04/14/Github-블로그-만들기-with-Hexo---1/</code> 과 같이 title이 패스로 들어가게 됩니다.<br>만약 이 부분을 변경하고 싶을 때 <code>permalink</code>를 지정해주면 그 글의 주소는 설정한대로 적용됩니다.<br>자세한 내용은 <a href="https://hexo.io/ko/docs/front-matter" rel="external nofollow noopener noreferrer" target="_blank">Front-matter</a>를 참고해주세요.</p><h2 id="more-excerpt"><a href="#more-excerpt" class="headerlink" title="more, excerpt"></a>more, excerpt</h2><p>인덱스 페이지에 어느부분까지 표시할 건지에 대한 세팅을 할 수 있습니다.<br>본문에 아래 주석을 이용하면 되는데요.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">본문이 이렇게 있을 때 여기까지만 인덱스 페이지에 나타납니다.</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">여기서부턴 인덱스에 안나옵니다.</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">여기까지의 내용은 인덱스 페이지에만 나타납니다.</span><br><span class="line">&lt;!-- excerpt --&gt;</span><br><span class="line">여기서부턴 본문 시작입니다.</span><br></pre></td></tr></table></figure><h2 id="Escape"><a href="#Escape" class="headerlink" title="Escape"></a>Escape</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>이렇게 템플릿 문법을 이스케이핑 하기 위해서는 raw 구문을 이용합니다.</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="이미지-삽입"><a href="#이미지-삽입" class="headerlink" title="이미지 삽입"></a>이미지 삽입</h2><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> <span class="comment"># or false</span></span><br></pre></td></tr></table></figure><p>만약 <code>_config.yml</code> 파일의 저 항목이 true로 되어있다면 글 마다 글 제목과 같은 asset용 디렉토리가 생깁니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% asset_img demo.png %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>그 디렉토리의 <code>demo.png</code>를 첨부하려면 위와같이 하면 됩니다.<br><a href="https://hexo.io/ko/docs/asset-folders" rel="external nofollow noopener noreferrer" target="_blank">Asset-Folders</a>를 참고해주세요. </p><h2 id="로컬에서-확인하기"><a href="#로컬에서-확인하기" class="headerlink" title="로컬에서 확인하기"></a>로컬에서 확인하기</h2><p>퍼블리싱 전에 로컬에서 확인을 하기 위해서는 아래 명령을 이용합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo server --draft <span class="comment"># draft도 확인하고 싶을 때</span></span><br></pre></td></tr></table></figure></p><p>자세한 내용은 <a href="https://hexo.io/ko/docs/commands" rel="external nofollow noopener noreferrer" target="_blank">Commands</a>를 참고해주세요.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>사실 공식 문서에 다 있는 내용이고 문서가 번역도 다 되어있어서 거기를 한번 쓱 보시는게 좋을듯 합니다.<br>이제 대충 글 쓰는 방법은 알았으니 다음엔 배포를 어떻게 할지 알아보겠습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Github 블로그 만들기 with Hexo - 초기설정</title>
      <link>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-1/</link>
      <guid>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-1/</guid>
      <pubDate>Sun, 14 Apr 2019 08:10:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;장점을 다 포기하더라도 Geek 함을 좇고 싶은자에게 추천합니다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><h2 id="Github-블로그-만들기"><a href="#Github-블로그-만들기" class="headerlink" title="Github 블로그 만들기"></a>Github 블로그 만들기</h2><p>최근에 제가 무슨 바람이 들었는진 모르겠지만 왠지 나만의 글쓰기 공간이 필요할것 같다는 생각이 들었습니다.<br>그래서 여러 글쓰기 플랫폼을 고려해보았는데요. 최종 후보는 아래처럼 두가지로 추려졌습니다.</p><ul><li>티스토리</li><li>Github Page</li></ul><p>실제 얼마전부터 티스토리에 글을 쓰고 있습니다.<br>하지만 <code>*.github.io</code> 라는 도메인이 자꾸 눈앞에 아른거리더군요.<br>제가 개발자여서 그런지 Github 블로그만의 geek함을 도저히 떨쳐버릴수가 없었습니다.<br>게다가 한 1~2년전부터 정적 웹사이트 생성기로 블로그를 만드는게 유행이라고 하더군요.<br>그래서 생각했습니다.</p><blockquote><p>둘 다 해보자</p></blockquote><h2 id="Github-블로그를-고민하는-분들께"><a href="#Github-블로그를-고민하는-분들께" class="headerlink" title="Github 블로그를 고민하는 분들께"></a>Github 블로그를 고민하는 분들께</h2><p>사실 잘 만들어져있는 플랫폼을 사용하는게 가장 좋습니다. 저도 이것을 만들기까지 굉장한 고민을 했습니다.<br>일단 Github 블로그가 아닌 잘 만들어진 플랫폼을 사용했을때의 이점을 생각해봅시다. </p><ul><li>글쓰기외엔 아무 생각 안해도 된다.</li><li>글을 쓸 때 고퀄의 웹에디터를 사용할 수 있다.</li><li>통계기능을 지원한다.</li><li>네이버 블로그나 티스토리는 자사 검색엔진 노출을 보장한다.</li><li>카테고리, 태그, 방명록, 구독, 이웃 등의 요소들이 제공된다.</li></ul><p>위의 장점에 비춰볼때 Github 블로그는 아래에 해당하는 분들께 추천합니다.</p><ul><li>위의 모든 장점을 다 포기하더라도 Geek 함을 좇고 싶은 자</li><li>필요한 것들에 대해 스스로 답을 찾을 각오가 되어있는 자 </li></ul><p>바꿔말하면 <code>geek 함 말고 장점이 없다</code> 입니다.<br>네. 맞습니다. 그거 하나때문에 시작하려고 합니다.</p><p>그래도 아쉬우니 장점을 꼽자면..</p><ul><li>커스터마이징이 무궁무진하다.</li><li>IDE로 작업하기 때문에 일하는 줄 안다.</li></ul><p>등이 있겠군요.</p><h2 id="Hexo를-선택한-이유"><a href="#Hexo를-선택한-이유" class="headerlink" title="Hexo를 선택한 이유"></a>Hexo를 선택한 이유</h2><p>정적 웹사이트 생성기에 대해 많이 알아보았습니다. <code>Jeykill</code>이 가장 많이 사용되었고, 그 뒤를 <code>Hexo</code>가 따르고 있더군요. 물론 다른 선택지도 많이 있었습니다만 Hexo를 선택한 이유는 다음과 같습니다.</p><ul><li><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" rel="external nofollow noopener noreferrer" target="_blank">Tranquilpeak</a> 테마가 아주 맘에 들었다.</li><li>한글 문서가 있다.</li><li>검색하면 참고할게 많이 나온다.</li><li><code>Jekyll</code>도 참고할게 많지만 맘에드는테마가 없다.</li><li>개인적으로 <code>Ruby</code> 보다는 <code>Nodejs</code> 가 낫다.</li></ul><p>사실 어떤 언어 기반으로 만들어졌냐는 초기 세팅할 때 말곤 크게 의미가 없습니다.<br><code>Jekyll</code>과 <code>Hexo</code>는 처음에 <code>gem</code> 으로 설치하느냐 <code>npm</code> 으로 설치하느냐 차이입니다.<br>게다가 어차피 글은 마크다운으로 쓸 것이기 때문에 기반 언어와 크게 상관이 없습니다.</p><h2 id="Hexo-프로젝트-생성-Tranquilpeak-적용"><a href="#Hexo-프로젝트-생성-Tranquilpeak-적용" class="headerlink" title="Hexo 프로젝트 생성 + Tranquilpeak 적용"></a>Hexo 프로젝트 생성 + Tranquilpeak 적용</h2><p>모든 내용은 <a href="https://hexo.io/ko/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>에 친절히 설치되어있습니다만 중요한것들은 직접 나열해보도록 하겠습니다.<br>저는 mac의 환경인데요. 혹시 windows를 사용하신다면 bash shell을 사용할 수 있는 도구를 준비해주세요.<br>참고로 <em>git, nodejs는 설치됐다고 가정합니다.</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 아래의 명령으로 hexo-cli를 설치해줍시다.</span></span><br><span class="line">$ npm install hexo-cli -g </span><br><span class="line"></span><br><span class="line"><span class="comment"># 만약 권한에 걸린다면 sudo를 이용합시다.</span></span><br><span class="line">$ sudo npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래 명령으로 hexo 기본 프로젝트를 생성합니다.</span></span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><br>만약 설치가 잘 안된다 싶으면 npm에 대한 문제 해결 방법을 찾아봐야하는데요.<br>구글링을 잘 해보시면 되겠습니다.</p><p>저는 성질이 급하므로 바로 <a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" rel="external nofollow noopener noreferrer" target="_blank">Tranquilpeak</a> 테마를 적용해보았습니다.<br><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/releases" rel="external nofollow noopener noreferrer" target="_blank">releases</a>에서 최신 버전을 받도록 합시다.<br>현재 기준 3.0.2가 최신이네요.</p><ol><li>다운로드 받은 후 압축을 푼다.</li><li>풀린 디렉토리 이름을 <code>tranquilpeak</code>로 변경한다.</li><li>이 디렉토리를 위에서 생성한 hexo 기본 프로젝트 내의 <code>themes</code> 디렉토리에 넣는다.</li><li>위에서 생성한 프로젝트의 _config.yml을 연다. (themes/tranquilpeak/_config.yml이 아닙니다!)</li><li>맨아래로 주르륵 내려가서 테마를 <code>theme: tranquilpeak</code>로 변경한다.</li></ol><p>대충 설정은 다 된것 같으니 띄워봅시다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 위에서 생성한 프로젝트 디렉토리인 &lt;folder&gt;에서 진행합니다.</span></span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><br>로컬에서는 <a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000</a>에서 테스트가 가능합니다.<br><code>Hello World</code>라는 예제가 잘 나타나면 성공입니다.</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="category-tags-활성화-하기"><a href="#category-tags-활성화-하기" class="headerlink" title="category, tags 활성화 하기"></a>category, tags 활성화 하기</h2><p>자세한건 <a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/DOCUMENTATION.md" rel="external nofollow noopener noreferrer" target="_blank">Tranquilpeak 문서</a>를 참고하시면 됩니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 위에서 생성한 프로젝트 디렉토리인 &lt;folder&gt;에서 진행합니다.</span></span><br><span class="line">$ hexo new page <span class="string">"all-categories"</span></span><br><span class="line">$ hexo new page <span class="string">"all-tags"</span></span><br></pre></td></tr></table></figure></p><p>위 두 명령을 실행했다면 아래의 파일들이 생겼을겁니다.</p><ul><li>source/all-categories/index.md</li><li>source/all-tags/index.md</li></ul><p>위 두 파일을 각각 아래처럼 수정해줍시다.</p><figure class="highlight yaml"><figcaption><span>source/all-categories/index.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">"all-categories"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"all-categories"</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>source/all-tags/index.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">"all-tags"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"all-tags"</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="사이드바-바꾸기"><a href="#사이드바-바꾸기" class="headerlink" title="사이드바 바꾸기"></a>사이드바 바꾸기</h2><img src="/2019/04/14/github-blog-with-hexo-1/demo.png"><p><a href="https://louisbarranqueiro.github.io/hexo-theme-tranquilpeak/" rel="external nofollow noopener noreferrer" target="_blank">데모 페이지</a>에서 보다시피 가로 1280px 이상이면 사이드바가 매우 넓은데요.<br>저는 컨텐츠 영역을 더 크게 보고 싶기때문에 이 옵션을 약간 변경했습니다.</p><ol><li><code>themes/tranquilpeak/_config.yml</code>를 연다.</li><li><code>sidebar_behavior</code>를 찾는다.</li><li><code>sidebar_behavior: 2</code>로 변경한다.</li></ol><p>참고로 주석에 많은 설명들이 있으니 본인이 원하는 것으로 지정하면 되겠습니다.</p><h2 id="cover-바꾸기"><a href="#cover-바꾸기" class="headerlink" title="cover 바꾸기"></a>cover 바꾸기</h2><p>사이드바 영역의 이미지를 바꾸고 싶다면 아래와 같이 합니다.</p><ol><li><code>themes/tranquilpeak/source/_images</code> 에 원하는 이미지를 넣는다.</li><li><code>themes/tranquilpeak/_config.yml</code>를 연다.</li><li><code>cover_image</code>라고 쓰여진 부분을 찾는다.</li><li><code>cover_image: &lt;파일명&gt;</code>으로 변경한다.</li></ol><p>참고로 기본 커버이미지들은 <code>1920x1080</code> 입니다. 저는 일단 같은 사이즈의 이미지로 교체하였습니다.</p><h2 id="font-바꾸기"><a href="#font-바꾸기" class="headerlink" title="font 바꾸기"></a>font 바꾸기</h2><p>이 프로젝트가 영문, 중문 등만 지원하다보니 한글 폰트가 매우 안타깝게 나타나는데요.<br>맘에 안드니 폰트를 교체해보도록 하겠습니다. 참고로 저의 경우 <a href="https://hangeul.naver.com/2017/nanum" rel="external nofollow noopener noreferrer" target="_blank">나눔스퀘어라운드</a>를 사용하였습니다.<br>소스코드 폰트는 <code>Source Code Pro</code>입니다.</p><ol><li><code>themes/tranquilpeak/source/_css/tranquilpeak.scss</code>를 엽니다.</li><li>파일 하단에 이것을 추가합시다. <br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span></span><br><span class="line">url(https://cdn.rawgit.com/innks/NanumSquareRound/master/nanumsquareround.css);</span><br></pre></td></tr></table></figure></li></ol><p>cdn에 올라가있는 나눔폰트 관련 css를 import 해주었습니다.</p><p>다음은 기본 폰트 설정을 바꿔줘야합니다.</p><ol><li><code>themes/tranquilpeak/source/_css/utils/_variables.scss</code>를 열어봅시다.</li><li>Font families 부분을 아래와 같이 수정합시다. (불안하면 한 벌 복사해서 주석처리해둡시다.) <br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Font families</span></span><br><span class="line"><span class="variable">$merriweather-serif</span>:   <span class="string">'Merriweather'</span>, serif; <span class="comment">// 이건 지우면 에러나더라고요</span></span><br><span class="line"><span class="variable">$nanum-sans-kr</span>:          <span class="string">'NanumSquareRound'</span>, <span class="string">"Helvetica Neue"</span>, sans-serif; <span class="comment">// 기본 폰트 </span></span><br><span class="line"><span class="variable">$nanum-coding</span>:   <span class="string">'Source Code Pro'</span>, <span class="string">"NanumSquareRound"</span>, Consolas; <span class="comment">// 코드 폰트</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$font-family-base</span>: <span class="variable">$nanum-sans-kr</span>; <span class="comment">// 기본폰트 바꾸기</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래처럼 'code'와 'highlight'만 코드 폰트로 변경하고</span></span><br><span class="line"><span class="comment">// 나머지는 전부 나눔스퀘어라운드로 변경합시다.</span></span><br><span class="line"><span class="variable">$font-families</span>: (</span><br><span class="line">  // base</span><br><span class="line">    <span class="string">'headings'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">  // components</span><br><span class="line">    <span class="string">'code'</span>: <span class="variable">$nanum-coding</span>,</span><br><span class="line">    <span class="string">'caption'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">    <span class="string">'image-gallery'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">    <span class="string">'post-header-cover'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">    <span class="string">'post-meta'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">    <span class="string">'post-content'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">    <span class="string">'post-excerpt-link'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">    <span class="string">'highlight'</span>: <span class="variable">$nanum-coding</span>,</span><br><span class="line">  // layout</span><br><span class="line">    <span class="string">'sidebar'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><p>사실 이렇게 변경해도 적용이 안됩니다. 빌드 과정을 거쳐줘야 적용이 되는데요.<br>아래에서 알아봅시다.</p><p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-4098225824538946" data-ad-slot="4972027138"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="grunt"><a href="#grunt" class="headerlink" title="grunt"></a>grunt</h2><p>grunt란 아주 단순히 말해서 javascript 빌드 툴이라고 생각하시면 되는데요. 궁금하면 직접 검색해보시길 권장합니다.<br>여기서는 그냥 <code>테마 안의 css, js 등을 변경한 후에 해야할 일</code>이라고 알아두시면 편할것 같습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 안되면 sudo 권한으로 진행해주세요.</span></span><br><span class="line">$ npm install -g grunt-cli</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> themes/tranquilpeak</span><br><span class="line">$ npm install grunt --save-dev</span><br></pre></td></tr></table></figure><p>초기 설정은 이렇게 하면 됩니다.<br>앞으로 테마 안의 css, js 등을 수정한 후엔 아래의 명령을 날립시다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># themes/tranquilpeak 디렉토리에서</span></span><br><span class="line">$ grunt build</span><br></pre></td></tr></table></figure></p><p>그 후 hexo server를 구동시키면 폰트가 바뀌어있을 것입니다.</p><h2 id="그-외-config"><a href="#그-외-config" class="headerlink" title="그 외 config"></a>그 외 config</h2><p>사실 여기서 모든 설정을 다 다룰 순 없습니다. 그냥 제가 건드린것들만 소개합니다.</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">"밍피디"</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">"잔망스러운 개발자, 밍피디"</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">"밍피디"</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">"en"</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">"Asia/Seoul"</span></span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/ko/docs/configuration" rel="external nofollow noopener noreferrer" target="_blank">Hexo 문서</a>를 참고하여 필요한 것들도 설정해줍시다. </p><p>아래는 테마의 설정 파일입니다.<br><figure class="highlight yaml"><figcaption><span>themes/tranquilpeak/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line"><span class="attr">    menu:</span></span><br><span class="line"><span class="attr">        home:</span></span><br><span class="line"><span class="attr">            title:</span> <span class="string">global.home</span></span><br><span class="line"><span class="attr">            url:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">            icon:</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">    <span class="comment"># ... 필요한 것들만 활성화 해주세요</span></span><br><span class="line">            </span><br></pre></td></tr></table></figure><br><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/DOCUMENTATION.md" rel="external nofollow noopener noreferrer" target="_blank">Tranquilpeak 문서</a>를 참고하여 마저 설정합시다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>초기 세팅에 대해서만 알아보았는데요. 다른 솔루션에 비해서는 생각보다 간단한것 같은 느낌이 듭니다.<br>세팅만 하고 글을 쓰는 방법을 소개하지 못했으니 다음 포스팅에서는 글을 쓰는 방법을 알아보겠습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-1/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
